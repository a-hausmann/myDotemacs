#+OPTIONS: ':nil *:t -:t ::t <:t H:4 \n:nil ^:t arch:headline
#+OPTIONS: author:t broken-links:nil c:nil creator:nil
#+OPTIONS: d:(not "LOGBOOK") date:t e:t email:nil f:t inline:t num:nil
#+OPTIONS: p:nil pri:nil prop:nil stat:t tags:t tasks:t tex:t
#+OPTIONS: timestamp:t title:t toc:t todo:t |:t
#+SELECT_TAGS: export
#+EXCLUDE_TAGS: noexport
#+CREATOR: Emacs 26.1 (Org mode 9.1.9)
#+STARTUP: overview
#+DATE: <2023-08-05 Sat 12:23>
#+TITLE: Dotemacs
#+AUTHOR: Arnold Hausmann
#+LANGUAGE: en
#+ATTR_HTML: :style margin-left: auto; margin-right: auto;
#+OPTIONS: html-link-use-abs-url:nil html-postamble:auto
#+OPTIONS: html-preamble:t html-scripts:t html-style:t
#+OPTIONS: html5-fancy:nil tex:t
#+HTML_DOCTYPE: xhtml-strict
#+HTML_CONTAINER: div
#+CREATOR: <a href="https://www.gnu.org/software/emacs/">Emacs</a> 26.1 (<a href="https://orgmode.org">Org</a> mode 9.1.14)
#+PROPERTY: header-args :tangle yes

* Table of Contents
* Introduction
This is the main configuration file for a "minimal" configuration using Org mode.  I mean to combine several different configurations from others: Bailey Ling, Chen Bin, and "Uncle Dave".  I like different pieces of each; Uncle Dave uses the dotemacs.org as the base configuration but doesn't use Evil mode at all, while Bailey Ling's configuration loads superfast and has pretty nice Hydras defined (though I'll change several things) but Org Mode doesn't act correctly, and Chen Bin's configuration becomes "usable" fairly quickly, but continues to "load" for several seconds (though *much* faster than Spacemacs on Windows).

Hopefully, this configuration will meld these concepts/configurations together, keeping the best of each, and losing the bad.  This will be a "work-in-progress" for some time to come I suspect...we'll see what the future holds.

Here are some links:
1. [[https://github.com/daedreth/UncleDavesEmacs][Uncle Dave's Emacs configuration page]]
2. [[https://github.com/howardabrams/dot-files/blob/master/emacs-evil.org][Howard Abrams Evil configuration page]]
3. [[https://github.com/aaronbieber/dotfiles/blob/master/configs/emacs.d/lisp/init-evil.el][Aaron Bieber's Evil configuration page]]

Started: 9/29/2018.
* Things still to do
These are items I still need to create, or fix.
- Figure out how to change foreground color in Spaceline "spaceline-highlight-face", as the buffer name is too light for orange.
- Find out if there is a "cursor locator" package/function to temporarily create cross-hair effect. Check out "crosshairs.el", crosshairs-mode.
* Stuff to do *before* Evil
** Lexical binding, versioning
First line of dotemacs.el should be comment for lexical binding.  Added File on 2021-03-26.
Attempted multiple ways to create a line ";; Version: " followed by variable with version number in format YYYYMMDD.HHMM, but failed. Including another source block attempting to create global variable later used below, adding to local file variables at end of file to create global variable, using named block for named variable in below block, etc. Nothing panned out. Could not create global variable in tangled code, could not "import" variable into source code; every time I use =:var= tangle wraps block with a let, quotes the variable, and does NOTHING with the variable "ver" I'm trapping into.  Just doesn't work well.
Tried this last: " :var ver='ver_nbr :exports results :results value raw" 
#+begin_src emacs-lisp
  ;; -*- lexical-binding: t -*-
  ;; File: dotemacs.el
  ;; Version: ver
#+end_src
** Window system and more
*** Set load-path for custom code
I will have some subdirectories containing elisp code, so add these directories to the load-path variable.
#+BEGIN_SRC emacs-lisp
  ;; 2019-01-02: Check OS type first.
  ;; 2019-02-10: Made simpler IF statement.

  (if (string-equal system-type "windows-nt")
      (add-to-list 'load-path "c:/Users/frst6889/.emacs.d/private/local")
    (add-to-list 'load-path "~/.emacs.d/private/local"))
#+END_SRC

*** Set the size of the frame
Reference: https://raw.githubusercontent.com/angrybacon/dotemacs/master/dotemacs.org

Set the size of the frame. Some UI elements are best left unused. 2019-10-09: Set Windows a little bigger than home Linux due to differences in resolution of systems.
#+BEGIN_SRC emacs-lisp
  (when window-system
    (if (string-equal system-type "windows-nt")
        (progn
          ;; 2020-07-14: while I'm on laptop-only, less size.
          ;; (add-to-list 'default-frame-alist '(height . 45))
          ;; (add-to-list 'default-frame-alist '(width . 150))
          (add-to-list 'default-frame-alist '(height . 40))
          (add-to-list 'default-frame-alist '(width . 140)))
      (progn
        (add-to-list 'default-frame-alist '(height . 38))
        (add-to-list 'default-frame-alist '(width . 140))))
    (blink-cursor-mode 0))
#+END_SRC

*** Set the Customization file
Tell Emacs to put all Customization into a special file, so as not to corrupt either init.el or this file.
#+BEGIN_SRC emacs-lisp
(setq-default custom-file (expand-file-name ".custom.el" user-emacs-directory))
(when (file-exists-p custom-file)
  (load custom-file))
#+END_SRC

*** Set garbage collection hook
Garbage-collect on focus-out, Emacs should feel snappier.

#+BEGIN_SRC emacs-lisp
(add-hook 'focus-out-hook #'garbage-collect)
#+END_SRC

*** Set Font
#+begin_src emacs-lisp
  ;; Set default font
  ;; 2019-08-11: need a slightly larger font on home Linux laptop with its greater resolution.
  ;; (if (string-equal system-type "windows-nt")
  ;;     (set-face-attribute 'default nil
  ;;                         :family "Lucida Sans Typewriter"
  ;;                         :height 110
  ;;                         :weight 'normal
  ;;                         :width 'normal)
  ;;   (set-face-attribute 'default nil
  ;;                       :family "Source Code Pro"
  ;;                       :height 120
  ;;                       :weight 'normal
  ;;                       :width 'normal))
  (load "aeh-font")
#+end_src
*** Set regular package refreshes without killing restarts
Have found out that the many, *many* times I have received a "package not found" even when I can absolutely find the package in Melpa is that I have an outdated package listing, easily fixed with the following:

#+BEGIN_SRC emacs-lisp
  ;; 2018-11-04: Set variable with name of file holding last-refreshed date
  (setq aeh-last-package-refresh-file (expand-file-name ".package-refresh-date" user-emacs-directory))
  ;; Compound condition: if Sunday, if file exists, get last-refresh-date and compare to today, when not equal,
  ;; refresh the packages and update file with today's date, but when equal, just write message. If NO FILE
  ;; found, create file with today's date and refresh packages, write message.
  ;; Added newline to date file, and must add newline when comparing strings as "buffer-string" returns all
  ;; bytes, including the newline (nothing like perls "chomp" command).
  (defun aeh/package-refresh-contents (mess-txt)
    (interactive)
    (write-region (format-time-string "%Y%m%d\n") nil aeh-last-package-refresh-file)
    (message (concat mess-txt (format-time-string "%m/%d/%Y %H:%M:%S")))
    (package-refresh-contents))
  (if (equal (format-time-string "%a")
             (if (not (string-equal system-type "windows-nt"))
                 "Sun"
               "Mon"))
      (if (file-exists-p aeh-last-package-refresh-file)
          (progn
            (with-temp-buffer
              (insert-file-contents aeh-last-package-refresh-file)
              (setq aeh-last-package-refresh-date (buffer-string)))
            (if (equal aeh-last-package-refresh-date (format-time-string "%Y%m%d\n"))
                (message "1: Found same date")
              (aeh/package-refresh-contents "2: Different date, refresh package contents on ")))
        (aeh/package-refresh-contents "3: No Date file, refresh package contents on ")))
#+END_SRC

*** Personalization: set user variables for Name and Email Address.
2019-04-10: Set this up for automatic "import" into Org mode templates.
#+begin_src emacs-lisp
  (setq user-full-name "Arnold Hausmann")
  (if (string-equal system-type "windows-nt")
      (setq user-mail-address "Arnold.Hausmann@trinity-health.org")
    (setq user-mail-address "ArnoldH@comcast.net"))
#+end_src

*** Better defaults
See ref: https://github.com/angrybacon/dotemacs/blob/master/dotemacs.org for more info
#+begin_src emacs-lisp
  (setq-default
   ;; ad-redefinition-action 'accept                   ; Silence warnings for redefinition
   auto-window-vscroll nil                          ; Lighten vertical scroll
   confirm-kill-emacs 'yes-or-no-p                  ; Confirm before exiting Emacs
   cursor-in-non-selected-windows nil               ; Hide the cursor in inactive windows
   delete-by-moving-to-trash t                      ; Delete files to trash
   ;; display-time-default-load-average nil            ; Don't display load average
   display-time-format "%H:%M"                      ; Format the time string
   fill-column 80                                   ; Set width for automatic line breaks
   garbage-collection-messages t                    ; set to non-nil to see GC messages.
   help-window-select t                             ; Focus new help windows when opened
   indent-tabs-mode nil                             ; Stop using tabs to indent
   inhibit-startup-screen t                         ; Disable start-up screen
   mouse-yank-at-point t                            ; Yank at point rather than pointer
   ;; ns-use-srgb-colorspace nil                       ; Don't use sRGB colors
   ;; recenter-positions '(5 top bottom)               ; Set re-centering positions
   scroll-conservatively most-positive-fixnum       ; Always scroll by one line
   ;; scroll-margin 2                                  ; Add a margin when scrolling vertically, default 0
   ;; select-enable-clipboard t                        ; Merge system's and Emacs' clipboard
   sentence-end-double-space nil                    ; End a sentence after a dot and a space
   show-trailing-whitespace nil                     ; Display trailing whitespaces
   ;; split-height-threshold nil                       ; Disable vertical window splitting
   ;; split-width-threshold nil                        ; Disable horizontal window splitting
   tab-width 4                                      ; Set width for tabs
   ;; uniquify-buffer-name-style 'forward              ; Uniquify buffer names
   window-combination-resize t                      ; Resize windows proportionally
   x-stretch-cursor t                               ; Stretch cursor to the glyph width
   display-line-numbers-type 'visual                ; Display relative+visible line#, works with folding.
   ;; 2019-08-30: Found in Oleh Krehel's init.el.
   recentf-max-saved-items 100                      ; abo-abo sets to 600, but I'm cautious.
   )
  ;; (cd "~/")                                         ; Move to the user directory
  (setq kill-ring-max 100)
  (delete-selection-mode 1)                         ; Replace region when inserting text
  (display-time-mode 1)                             ; Enable time in the mode-line
  (fringe-mode 0)                                   ; Disable fringes
  (fset 'yes-or-no-p 'y-or-n-p)                     ; Replace yes/no prompts with y/n
  (global-subword-mode 1)                           ; Iterate through CamelCase words
  ;; (menu-bar-mode 0)                                 ; Disable the menu bar
  ;; DO NOT USE option "banish" as this conflicts with Windows, at least Windows 10, as if you drag
  ;; the frame to the corner it demands to take half the screen and will not enable pulling out to
  ;; to middle of screen.  Most disconcerting!
  (mouse-avoidance-mode 'animate)                   ; Avoid collision of mouse with point KEEP ON ANIMATE
  (put 'downcase-region 'disabled nil)              ; Enable downcase-region
  (put 'upcase-region 'disabled nil)                ; Enable upcase-region
  (set-default-coding-systems 'utf-8)               ; Default to utf-8 encoding
  (setq dired-dwim-target t)                        ; Allow direct to dwim target of move, copy commands
  (setq make-backup-files nil)                      ; Disable backup files
  (setq auto-save-default nil)                      ; Disable auto-save funtionality
  (global-set-key (kbd "C-M-y") 'clipboard-yank)    ; 2020-05-07: add mapping to yank from clipboard

  ;; 06/29/2023: Ref: https://protesilaos.com/codelog/2023-06-28-emacs-mark-register-basics/
  ;; Also reply to my comments on https://www.youtube.com/watch?v=TJrAkCyH6Dk&lc=UgwnC2dkrdFXPHprQ3V4AaABAg.9rXYiuexy0S9rXwlMPdw4G
  ;; By default, the built-in `savehist-mode' only keeps a record of
  ;; minibuffer histories.  This is helpful as it surfaces the most
  ;; recently selected items to the top, allowing you to access them again
  ;; very quickly.  With the variable `savehist-additional-variables' we
  ;; can make `savehist-mode' keep a record of any variable we want, so
  ;; that it persists between Emacs sessions.  I do this to store the
  ;; `kill-ring' and the `register-alist'.
  ;; [AH] Checking my native values first, I find (projectile-project-command-history evil-jumps-history)
  (setq savehist-additional-variables '(register-alist 
                                        kill-ring
                                        mark-ring
                                        global-mark-ring
                                        search-ring
                                        regexp-search-ring
                                        projectile-project-command-history 
                                        evil-jumps-history))
  (savehist-mode 1)

  ;; Make Emacs repeat the C-u C-SPC command (`set-mark-command') by
  ;; following it up with another C-SPC.  It is faster to type
  ;; C-u C-SPC, C-SPC, C-SPC, than C-u C-SPC, C-u C-SPC, C-u C-SPC...
  (setq set-mark-command-repeat-pop t)
#+end_src

*** Hooks
#+begin_src emacs-lisp
  (add-hook 'prog-mode-hook 'display-line-numbers-mode)
#+end_src
*** Languages
Here is where I put languages configurations: Lisp, etc.
***** Lisp
#+BEGIN_SRC emacs-lisp
  ;; 2021-02-21: think this is circular reference, remove hook and set to load on command.
  (use-package emacs-lisp-mode
    :ensure nil
    ;; :defer 2
    :commands emacs-lisp-mode
    :delight emacs-lisp-mode "Emacs Lisp"
    :config (delight 'lisp-interaction-mode "Lisp Interaction"))
  ;; 2021-02-21: Package ielm is a repl for emacs lisp, so ONLY load when commanded in.
  (use-package ielm
    :ensure nil
    :commands ielm
    :hook (ielm-mode . (lambda () (setq-local scroll-margin 0))))
  (use-package lisp-mode
    :ensure nil
    :hook (emacs-lisp-mode . lisp-mode)
    ;; :defer 2
    :delight lisp-mode "Lisp")
  (add-hook 'emacs-lisp-mode-hook 'eldoc-mode)
#+END_SRC
*** Themes
**** SanityInc-tomorrow-bright
[[https://github.com/purcell/color-theme-sanityinc-tomorrow][SanityInc-Tomorrow]] is a collection of five variations: day, night, blue, *bright* (my favorite), and eighties.

#+BEGIN_SRC emacs-lisp
  (use-package color-theme-sanityinc-tomorrow
    :ensure t
    :defer 1)
  ;; For whatever reason, the name for "load-theme" is "sanityinc-tomorrow-bright"
  ;; I already loaded all versions, marked as "safe" to use, but the "nil" below 
  ;; should do that on first load for new Emacs installation.
  ;; (load-theme 'sanityinc-tomorrow-bright t nil)
#+END_SRC

**** Finally--Load This Theme.
#+begin_src emacs-lisp
  ;; (load-theme 'reverse t nil)
  (load "aeh-theme")
#+end_src

*** Enable narrowing
Narrowing displays "selected" text and blanks out all other text in the buffer, making it appear that nothing else exists. You can perform any editing necessary while narrowed, to be retained when full text is restored by "widening" back to the full buffer.

Function "narrow-to-defun" is (I think) useful only in Lisp, and I'm not sure what "narrow-to-page" means, so I will only enable "narrow-to-region", which is selected text. Narrowing is enacted with "C-x n n" and reversed by "widening", enacted with "C-x n w".
#+BEGIN_SRC emacs-lisp
(put 'narrow-to-region 'disabled nil)
#+END_SRC

*** Looks
This will take care of startup messages, menus/scrollbars, encoding, "cursorline" highlighting, pretty symbols, and some Org mode settings.    

**** Remove startup message, possibly replace later (see dashboard)
 #+BEGIN_SRC emacs-lisp
 (setq inhibit-startup-message t)
 #+END_SRC

**** Disable menus and scrollbars
Can set any of these from -1 (FALSE as it is not 1) to 1 (TRUE) if they are desired.
2019-01-10: I think for a time, if Windows, use menu-bar-mode...
2019-04-14: changing back, let's see the menu bar for a while.
 #+BEGIN_SRC emacs-lisp
   (if (string-equal system-type "windows-nt")
       (menu-bar-mode 1)
     ;; (menu-bar-mode -1)
     (menu-bar-mode 1)
     )
   (tool-bar-mode -1)
   (scroll-bar-mode -1)
 #+END_SRC

**** Disable annoying bell
 Comment this line for visual reminder of events.
 #+BEGIN_SRC emacs-lisp
 (setq ring-bell-function 'ignore)
 #+END_SRC

**** Change "yes or no" questions to "y or n". This is great! *NEVER* change this one! 2019-08-13: see "Better defaults."
 #+BEGIN_SRC emacs-lisp
   ;; (defalias 'yes-or-no-p 'y-or-n-p)
 #+END_SRC

**** Set UTF-8 encoding
 #+BEGIN_SRC emacs-lisp
 (setq locale-coding-system 'utf-8)
 (set-terminal-coding-system 'utf-8)
 (set-keyboard-coding-system 'utf-8)
 (set-selection-coding-system 'utf-8)
 (prefer-coding-system 'utf-8)
 #+END_SRC

**** Highlight current line
 While "hl-line" works well in GUI, it's not so hot in terminal, so use only in GUI.
 #+BEGIN_SRC emacs-lisp
 (when window-system (add-hook 'prog-mode-hook 'hl-line-mode))
 #+END_SRC

**** Pretty symbols
 Changes =lambda= to an actual symbol, plus some others; works only in GUI mode.
 #+BEGIN_SRC emacs-lisp
 (when window-system
       (use-package pretty-mode
       :ensure t
       :config
       (global-pretty-mode t)))
 #+END_SRC

**** Show parens
 #+BEGIN_SRC emacs-lisp
 (show-paren-mode 1)
 #+END_SRC

**** Global mode settings
I really, *really* like visual-line-mode, so set globally.
#+BEGIN_SRC emacs-lisp
  (global-visual-line-mode 1)
#+END_SRC
*** Functionality
2021-02-16: Ref: http://pragmaticemacs.com/emacs/use-your-digits-and-a-personal-key-map-for-super-shortcuts/
Will now use C-1...10 and M-1...10 however I see fit, they can now be reassigned.
#+begin_src emacs-lisp
  (dotimes (n 10)
    (global-unset-key (kbd (format "C-%d" n)))
    (global-unset-key (kbd (format "M-%d" n)))
    )
#+end_src

Default browser
According to the [[https://www.emacswiki.org/emacs/BrowseUrl][BrowseUrl wiki]], there is already support for Opera, Firefox, and Chromium, even Edge, but not Internet Exploder. Looking at most of the documentation on the Wiki page, it seems that both must variables must be set, and there is no way out of that.  Oh well.
2019-01-11: change code to Chrome on Windows, else Opera. Code appears fine and evaluates, but doesn't work in Winders.  Shoot!

2019-06-08: So, will try using the native Emacs EWW instead of attempting to use Chrome as the external browser.
 #+BEGIN_SRC emacs-lisp
   (defun aeh/browse-url-chrome (url &optional new-window)
     ;; (shell-command (concat "C:\\\\Program Files (x86)\\\\Google\\\\Chrome\\\\Application\\\\chrome.exe" url)))
     (shell-command (concat "C:\\\\Users\\\\frst6889\\\\AppData\\\\Local\\\\Google\\\\Chrome\\\\Application\\\\chrome.exe" url)))

   ;; Since cannot get Chrome working in Windows, use EWW instead
   ;; 2023-08-05: Now using Brave instead of Opera.
   (setq aeh-default-browser "brave-browser")
   (if (string-equal system-type "windows-nt")
       (setq browse-url-browser-function 'eww-browse-url)
     ;; (setq browse-url-browser-function 'browse-url-generic
     ;;       browse-url-generic-program 'aeh/browse-url-chrome)
     (setq browse-url-browser-function 'browse-url-generic
           browse-url-generic-program aeh-default-browser))


 #+END_SRC
 
Use electric-pair-mode globally. 2018-12-27: turned off Autopair, turned on Electric-pair.
#+BEGIN_SRC emacs-lisp
  ;; 2019-04-08: Tried turning off in lisp-mode, Lispy still does weird stuff when not running.
  ;; 2019-04-14: Turning off to try Smartparens.
  ;; (electric-pair-mode 1)
#+END_SRC

** Packages
NOTE: The following use-package variables set True in init.el: =use-package-always-defer=, =use-package-always-ensure=.

*** General
2018-11-10: Have decided to try [[https://github.com/noctuid/general.el][General.el]] as a replacement for Evil-leader. Evil-leader does not appear to be able to allow an "alias" for a command, instead displaying the entire command.  This, I'm sure, has to do with Which-key in combination with Evil-leader, but I'd like to see something more like the menu options that Bailey Ling displays in his config. 

Thus far, this has worked well. The key here is that the function paired to the key binding *must* be a quoted list consisting of the command called, the ":which-key" property, ending with the text string to be displayed.  This is EXACTLY what I wanted to get from Evil-leader, but could not figure out. Note too that I can have multiple keymaps defined for keybindings; "b" is defined in normal, insert, and emacs modes to call the buffers hydra. Note yet again that I have defined a "leader" key of "SPC", and can also define a "local-leader" as another key, in this case, "C-M-;" (I would have loved to use "\" but that takes over the key completely and it cannot be used otherwise). Creating these variables, I can bind individual keys chords to these leaders by keymaps; General Rocks!
#+BEGIN_SRC emacs-lisp
  ;; 2021-02-21: used to just ensure and end use-package; everything else outside block.
  ;; Now put all prefix into config, and demand in general.
  ;; 2023-08-04: Change "which-key" to "wk" for brevity.
  (use-package general
    :ensure t
    :demand t
    :config
    ;; Prefix keybindings
    (general-create-definer aeh-leader-def
      :prefix "SPC")
    (general-create-definer aeh-local-leader-def
      :prefix "C-;")
    ;; Global keybindings
    (aeh-leader-def
      :keymaps '(normal visual emacs)
      ";" '(frog-jump-buffer :wk "Frog jump buffer")
      "TAB" '(aeh/switch-to-previous-buffer :wk "prev-buffer")
      "b" '(aeh/hydra-buffers/body :wk "buffers")
      "c" '(aeh/hydra-consult/body :wk "consult")
      "f" '(aeh/hydra-files/body :wk "files")
      "m" '(aeh/hydra-modes/body :wk "modes")
      "M" '(aeh/hydra-magit/body :wk "Magit")
      "r" '(aeh/hydra-rectangle/body :wk "rectangle")
      "s" '(aeh-set-politics-directory :wk "Politics")
      "t" '(aeh/hydra-toggles/body :wk "toggles")
      "y" '(aeh/hydra-yasnippet/body :wk "snippets")
      "w" '(aeh/hydra-windows/body :wk "windows"))
    (aeh-local-leader-def
      :keymaps 'insert
      ";" '(frog-jump-buffer :wk "Frog jump buffer")
      "TAB" '(aeh/switch-to-previous-buffer :wk "prev-buffer")
      ;; "c" '(aeh/hydra-counsel/body :wk "counsel")
      "d" '(aeh/hydra-insert-date-menu/body :wk "dates")
      "i" '(aeh/hydra-insert-stuff-menu/body :wk "insert stuff"))
    )
#+END_SRC

*** Ace-Window
Yet another package from Oleh Krehel, https://github.com/abo-abo/ace-window/wiki performs window movement with relatively few keystrokes.
This is copied from the https://github.com/abo-abo/ace-window.

2019-06-24: Change "aw-dispatch-always" to nil so when only two windows will not force "choice".
#+BEGIN_SRC emacs-lisp
  (defun aeh/scroll-other-window()
    (interactive)
    (scroll-other-window 1))
  (defun aeh/scroll-other-window-down ()
    (interactive)
    (scroll-other-window-down 1))
  (use-package ace-window
    :ensure t
    :commands ace-window
    :diminish
    :config
    (set-face-attribute
     'aw-leading-char-face nil
     :foreground "deep sky blue"
     :weight 'bold
     :height 3.0)
    (set-face-attribute
     'aw-mode-line-face nil
     :inherit 'mode-line-buffer-id
     :foreground "lawn green")
    ;; Ref: https://github.com/abo-abo/ace-window
    ;; 2021-10-19: going back to defaults, numbers for windows, recommended actions list.
    ;; (setq aw-keys '(?a ?s ?d ?f ?j ?k ?l)
    ;;       aw-dispatch-always t)
    (setq aw-dispatch-always nil)
    (defvar
          aw-dispatch-alist
          '((?x aw-delete-window "Delete Window")
            (?m aw-swap-window "Swap Window")
            (?M aw-move-window "Move Window")
            (?c aw-copy-window "Copy Window")
            (?j aw-switch-buffer-in-window "Select Buffer")
            (?n aw-flip-window "Flip Window")
            (?u aw-switch-buffer-other-window "Switch Buffer Other Window")
            (?v aw-split-window-vert "Split Vert Window")
            (?b aw-split-window-horz "Split Horz Window")
            (?o delete-other-windows "Delete Other Windows")
            ;; (?b balance-windows "Balance Windows")
            ;; (?u (lambda ()
            ;;       (progn
            ;;         (winner-undo)
            ;;         (setq this-command 'winner-undo))) "Winner Undo")
            ;; (?r winner-redo "Winner Redo")
            )
          "List of actions for `aw-dispatch-default'.")

    ;; (when (package-installed-p 'hydra)
    ;;   (defhydra aeh/hydra-window-size (:color red)
    ;;     "Windows size"
    ;;     ("h" shrink-window-horizontally "shrink horizontal")
    ;;     ("j" shrink-window "shrink vertical")
    ;;     ("k" enlarge-window "enlarge vertical")
    ;;     ("l" enlarge-window-horizontally "enlarge horizontal"))
    ;;   (defhydra aeh/hydra-window-frame (:color red)
    ;;     "Frame"
    ;;     ("f" make-frame "new frame")
    ;;     ("x" delete-frame "delete frame"))
    ;;   (defhydra aeh/hydra-window-scroll (:color red)
    ;;     "Scroll other window"
    ;;     ("n" aeh/scroll-other-window "scroll")
    ;;     ("p" aeh/scroll-other-window-down "scroll down"))
    ;;   (add-to-list 'aw-dispatch-alist '(?w aeh/hydra-window-size/body) t)
    ;;   (add-to-list 'aw-dispatch-alist '(?o aeh/hydra-window-scroll/body) t)
    ;;   (add-to-list 'aw-dispatch-alist '(?\; aeh/hydra-window-frame/body) t)
    ;;   )
    (ace-window-display-mode t)
    :bind
    ([remap other-window] . ace-window))
#+END_SRC

*** Ag (Silver Searcher frontend)
2019-04-21: Installed Silver Searcher on home laptop, and will attempt to do the same on Windows laptop at work. I reviewed the "Using Emacs #48 - Silversearcher" which includes the Wgrep package.  These two work together pretty well; Silversearcher finds files with text and places into a buffer, while wgrep can edit that buffer, saving the changes back into the files the original search terms found.  Neat, and very handy for refactoring code. Silversearcher also seems to integrate well with Counsel/Swiper, as there is a "counsel-ag" function already included.
Documentation reference: https://agel.readthedocs.io/en/latest/index.html
#+begin_src emacs-lisp
  (use-package ag
    :ensure t
    :commands ag
    :config
    (setq ag-group-matches nil))
#+end_src

*** All-the-icons
Downloaded/installed this somewhen, but never included in the dotemacs.org file till now (2019-07-22). At this point, am certain that the display of the hex value of the icon is 100% Windows-based problem.  I don't have this issue in Linux--the icons display properly.
#+begin_src emacs-lisp
  ;; 2020-05-14: load for non-Windows only.
  ;; 2020-06-12: ran M-x all-the-icons-install-fonts, and installed in Windows. This now works!
  ;; Ref: https://github.com/domtronn/all-the-icons.el
  (use-package all-the-icons
    :ensure t
    :diminish)
#+end_src
*** Amx (2020-01-22)
Amx is the newer alternative to smex (aka smart M-x).
Might look into installing "prescient" instead of amx. Links below:
https://www.reddit.com/r/emacs/comments/8q1nor/prescientel_simple_but_effective_sorting_and/
https://github.com/raxod502/prescient.el

#+begin_src emacs-lisp
  (use-package amx
    :ensure t
    :commands (amx amx-major-mode-commands execute-extended-command)
    :diminish
    :config
    (amx-mode t)   ; always in amx-mode
    (global-set-key (kbd "M-x") 'amx)
    (global-set-key (kbd "M-X") 'amx-major-mode-commands)
    ;; This is your old M-x.
    (global-set-key (kbd "C-c C-c M-x") 'execute-extended-command))
  ;; (setq-default amx-save-file (no-littering-expand-var-file-name ".amx-items"))
#+end_src
*** Avy
When avy is invoked you are prompted for the character to jump to /in the visible portion of the buffer/. Then each instance of the character is overlaid with another letter; pressing /that/ letter will move the point to that location. This can be hard to get used to, but once you do, you can swiftly move about the visible buffer.

NOTE: you can ONLY "search" for a SINGLE LETTER! This would work better for narrowed code, as in the case of this document, a single letter could be anywhere; almost better to use evil search, or Swiper. Uncle Dave likes to use =m-s= as the key binding, similar to =c-s= for Searching.

Found a trick; instead of binding to "avy-goto-char", use "avy-goto-char-timer". This allows the typing of multiple characters, more like vim's search, and if only one match, will automatically take you there after a timeout period, set with "avy-timeout-seconds". The timeout kicks in *after* you stop typing, good, and Any will show how many matches there are for the characters typed so far in the minibuffer.
#+BEGIN_SRC emacs-lisp
  (use-package avy
    :ensure t
    :commands avy-goto-char-timer
    :diminish
    :bind
    ("C-x C-a l" . avy-copy-line)
    ("C-x C-a r" . avy-copy-region)
    ("C-x C-a m" . avy-move-line)
    ("C-x C-a M-r" . avy-move-region)
    ("C-x C-a w" . avy-goto-word-1)
    ("C-x C-a ;" . avy-goto-char)
    ("C-x C-a '" . avy-goto-char-2)
    ("C-x C-a t" . avy-goto-char-timer)
    ("C-x C-t" . avy-goto-char-timer))
  (setq avy-timeout-seconds 0.5)
#+END_SRC

*** Aggressive-indent
Found [[https://github.com/Malabarba/aggressive-indent-mode][here]], aggressive-indent-mode is a minor mode which deals with changing code better than the standard electric-indent-mode. This does *not* work well with SQL or PL/SQL, and the documentation states the "aggressive-indent-excluded-modes" list will *only* be used in aggressive-indent is turned on globally.  This means, I cannot use the "prog-mode-hook" as that would include SQL. Set now for ONLY Emacs-lisp.
#+BEGIN_SRC emacs-lisp
  (use-package aggressive-indent
    :ensure t
    :diminish
    :hook (emacs-lisp-mode . aggressive-indent-mode))
  ;; (add-to-list 'aggressive-indent-excluded-modes 'html-mode)
#+END_SRC

*** Async
 This will allow asynchronous processing wherever possible...pretty nice.  Mostly useful in dired, so load after dired.
 #+BEGIN_SRC emacs-lisp
   (use-package async
     :diminish
     :demand
     ;:after dired
     :config
        (dired-async-mode 1))
 #+END_SRC
*** Beacon
Shine a light on the point position whenever the window scrolls to you can find the point.
Ref: https://github.com/Malabarba/beacon
#+begin_src emacs-lisp
  (use-package beacon
    :ensure t
    :diminish (beacon-mode)
    :demand
    :config
    (beacon-mode 1))
#+end_src
*** Column-enforce-mode
I found this while putzing around on the web and it works something like Vims columnline setting; text beyond a limit is highlighted so you know when the limit is exceeded. Can set to any column or use standard 80 columns.
#+begin_src emacs-lisp
  (use-package column-enforce-mode
    :ensure t
    :diminish
    :hook (prog-mode . column-enforce-mode)
    :config (setq column-enforce-comments nil))
#+end_src
*** Command-log-mode
Command-log-mode creates buffer "*command-log*" which displays commands executed. Then, "C-c o" will toggle the command-line-mode buffer to make it visible. Also, all the command-log-mode functions begin "clm/" so you can "M-x" then "clm/" to see the full list of commands which can be used.  The extra settings below make clear the packages defaults.
#+BEGIN_SRC emacs-lisp
  (use-package command-log-mode
    :ensure t
    :diminish
    :commands (command-log-mode)
    :bind ("C-c o" . clm/toggle-command-log-buffer))
#+END_SRC

*** Auto Completion
Used to have a HUGE section for Company mode, with tons of notes as I used to have a lot of problems with it.  I've gotten rid of all the text over the year and more that I tried to use
#+begin_src emacs-lisp
  (message "Loading aeh-auto-complete")
  (load "aeh-auto-complete")
#+end_src

*** Completion framework
Switching from Ivy/Counsel and Swiper to other alternatives which are lightweight and use native Emacs APIs.
So, removing all the Ivy/Counsel sections and other code which uses that framework, and switching to a single completion file in my private/local directory.
#+begin_src emacs-lisp
  (message "Loading aeh-completion")
  (load "aeh-completion")
#+end_src
*** Dashboard
This is the *NEW* startup screen, and together with Projectile, can provide with a quick look into the latest used files and projects. The welcome message (logo-title) can be whatever you want, the startup-banner can be any image file (.png preferable?).
2019-10-09: Using Projectile, I can easily do "C-c p f" to select a project and file-open from there--the same thing that the "projects" gets me in the dashboard; I prefer to regain some real estate and see only recent files.
 #+BEGIN_SRC emacs-lisp
   (use-package dashboard
     :ensure t
     :demand
     :diminish
     :config
     ;; (message "Dashboard loaded.")
     (dashboard-setup-startup-hook)
     ;; Disable shortcut "jump" indicators for each section, set
     (setq dashboard-show-shortcuts nil)
     (if (string-equal system-type "windows-nt")
         (setq dashboard-startup-banner "~/.emacs.d/img/dont-tread-on-emacs-150.png")
       (setq dashboard-startup-banner "~/.emacs.d/img/dashLogo.png"))
     (setq dashboard-banner-logo-title "My Startup Page - Get Hacking!")
     (setq dashboard-items '((recents  . 15)
                             ;; (projects . 5)
                             ;; (bookmarks . 5)
                             ))
     ;; 2019-07-20: updated package, new info, ref: https://github.com/emacs-dashboard/emacs-dashboard
     (setq dashboard-set-init-info 1)
     ;; (setq dashboard-footer-icon (all-the-icons-octicon "zap"
     ;;                                                    :height 1.1
     ;;                                                    :v-adjust -0.05
     ;;                                                    :face 'font-lock-keyword-face))
     (setq dashboard-set-footer 1))
 #+END_SRC

*** Dired stuff 
2021-02-21: Decided to put dired into use-package macro, ref: https://github.com/daviwil/dotfiles/blob/master/Emacs.org#dired. Will also collect all the dired-related packages here.

Package dired-git-info:
Learned about this one from Reddit, ref: http://xenodium.com/showhide-emacs-dired-details-in-style/, and looked at the repo: https://github.com/clemera/dired-git-info. This works OK in Windows, but is very slow as it appears to send a "git log" command string to Git for each file...probably best to narrow the dired buffer before invoking this mode.

Dired-narrow: 
From Mike Zamansky: https://github.com/zamansky/using-emacs/blob/master/myinit.org#dired
2019-06-28: better config from Pragmaticemacs: http://pragmaticemacs.com/emacs/dynamically-filter-directory-listing-with-dired-narrow/

Dired-subtree:
From Mike Zamansky: https://github.com/zamansky/using-emacs/blob/master/myinit.org#dired
2019-06-29: Mike's config methodology for keybindings is not good. Better to use the :bind macro instead.
2021-03-04: 'dired-listing-switches' doesn't seem to work for grouping directories first, so remove it as
that seemed to affect the date values--they were wrong.  Could be mix of dired sub-packages messing with
it, but leave that for another day.
2021-03-05: Saw video showing 'dired-listing-switches' is a customizable variable, so MUST be set in ":custom".
However, seems to also need GNU Coreutils, so installed that, and added to %path%, but still doesn't seem to work.
The "G" does eliminate group info, and "D" is supposed to "generate output designed for Emacs dired mode" according
to the "ls" info-page, but that doesn't list "--group-directories-first", so that appears to be the end of it on Windows.
It seems the best thing to do is set variable to the string to execute based on Windows or not.
#+begin_src emacs-lisp
  (use-package all-the-icons-dired :diminish)
  (if (string-equal system-type "windows-nt")
      (setq my/dired-string "-alG")
      (setq my/dired-string "-alG --group-directories-first"))
  (use-package dired
    :ensure nil
    :defer 1
    :commands (dired dired-jump)
    :custom (dired-listing-switches my/dired-string)
    :config
    ;; (autoload 'dired-omit-mode "dired-x")     ;;dired-omit-mode hides dotfiles and more; bad toggle (C-x M-o)
    ;; (setq dired-omit-files "^\\.[^.].*")
    ;; (setq dired-omit-verbose nil)
    (add-hook 'dired-load-hook
              (lambda ()
                (interactive)
                (dired-collapse)))
    (add-hook 'dired-mode-hook
              (lambda ()
                (interactive)
                ;; (dired-omit-mode 1)
                ;; (dired-hide-details-mode 1)
                (all-the-icons-dired-mode 1)
                (hl-line-mode 1)))
    (use-package dired-single
      :after dired
      :defer t)
    (use-package dired-collapse
      :after dired
      :defer t)
    (use-package dired-git-info
      :defer 1
      :diminish
      :after dired)
    (use-package dired-narrow
      :commands (dired-narrow dired-narrow-fuzzy dired-narrow-regexp)
      :diminish
      :config (message "Loded dired-narrow")
      :bind
      (:map dired-mode-map ("C-c C-n" . dired-narrow))
      (:map dired-mode-map ("C-c C-f" . dired-narrow-fuzzy))
      (:map dired-mode-map ("C-x C-n" . dired-narrow-regexp)))
    (use-package dired-subtree
      :after dired
      :commands (dired-subtree-toggle dired-subtree-cydle)
      :diminish
      :bind
      (:map dired-mode-map ("<tab>" . dired-subtree-toggle))
      (:map dired-mode-map ("<backtab>" . dired-subtree-cycle)))
    (use-package dired-hide-dotfiles
       :after dired
       :diminish)
    )

  (with-eval-after-load 'dired
    (define-key dired-mode-map ")" 'dired-git-info-mode))
#+end_src

*** Drag-stuff
2020-05-04: installing to replace move-text.
#+begin_src emacs-lisp
  (use-package drag-stuff
    :ensure t
    :diminish
    :bind ("M-<f3>" . drag-stuff-mode)
    :config
    (drag-stuff-define-keys))
#+end_src

*** EditorConfig for Emacs
2019-09-10: I don't know why this wasn't added before. Ref: https://github.com/editorconfig/editorconfig-emacs#readme
Note, the documentation states the package "requires a Core program", then goes on to state that it's not really necessary as the package includes a core library implemented in Emacs Lisp.
#+begin_src emacs-lisp
  (use-package editorconfig
    :ensure t
    :diminish
    :config
    (editorconfig-mode 1)
    (setq editorconfig-trim-whitespaces-mode 'ws-butler-mode))
#+end_src

*** Expand-region
With this [[https://github.com/magnars/expand-region.el][simple package]] from Magnar Sveen of [[http://emacsrocks.com][Emacs Rocks]] fame, a quick key-chord can select an ever expanding region; use "C-=" to access this function.

#+BEGIN_SRC emacs-lisp
  (use-package expand-region
    :ensure t
    :diminish
    :bind ("C-=" . er/expand-region))
#+END_SRC

*** Eyebrowse
Look into [[https://github.com/wasamasa/eyebrowse][Eyebrowse]] mode; Mike Zamansky did a [[https://www.youtube.com/watch?v=s6IXj0bS7L8][demo]] of it, pretty good window manager, it tracks window/buffer splits well within one session, though there seems no way to save over sessions. Though on the blog page, Vadim notes that searching for "persist" in the README shows how to save using "built-in desktop.el" package.
2021-02-21: Tried using =:commands= to trigger load, but doesn't work as no windows configured automatically; finally, just demand.
2022-08-27: I REALLY don't use this, so commenting out.
#+BEGIN_SRC emacs-lisp
  ;; (use-package eyebrowse
  ;;   :ensure t
  ;;   :diminish
  ;;   :demand
  ;;   :config (progn
  ;;             (define-key eyebrowse-mode-map (kbd "M-1") 'eyebrowse-switch-to-window-config-1)
  ;;             (define-key eyebrowse-mode-map (kbd "M-2") 'eyebrowse-switch-to-window-config-2)
  ;;             (define-key eyebrowse-mode-map (kbd "M-3") 'eyebrowse-switch-to-window-config-3)
  ;;             (define-key eyebrowse-mode-map (kbd "M-4") 'eyebrowse-switch-to-window-config-4)
  ;;             (eyebrowse-mode t)
  ;;             (setq eyebrowse-new-workspace t))
  ;;   )
#+END_SRC

*** Frog-jump-buffer
This actually beats iBuffer and counsel-ibuffer with Swiper; use General for bindings.
#+begin_src emacs-lisp
  (use-package frog-jump-buffer
    :ensure t
    :diminish)
#+end_src

*** Garbage Collector Magic Hack
Does a sneaky way of garbage collection.
#+begin_src emacs-lisp
  (use-package gcmh
    :ensure t
    :diminish
    :defer 1
    :config
    (gcmh-mode 1))
#+end_src

*** Git-gutter-fringe
This is a version of git-gutter which works better with linum-mode, see [[https://github.com/syohex/emacs-git-gutter-fringe][here]]. I only thought I had not been able to get this to work, but, I was missing a logical point; git-gutter cannot be enabled unless the file-buffer is in a Git repository (duh!). Even if in a Git repository, any changes in a buffer *must be saved to the file* before git-gutter can detect any changes; changes to the buffer alone cannot be compared to the Git HEAD commit.

2018-12-30: Wow! I *finally* got this darn thing working the way I want; GG-fringe will supposedly work best for me, linum or no linum, and this seems correct. I have set the gutter width to 2 columns, customized the Add/Mod/Delete markings, set an "update-interval" to 2 seconds, so after making *any* changes to a file, *WITHOUT* saving, the gutter will show the affect of my edits.  Plus, I can use the C-x commands to move to changes, stage or revert hunks. I need to find out what "mark hunk" does though.  BUT, I think this is now good to go.

2019-01-09: git-gutter depends on "diff" as external command, not available in Winders. Make this conditional; bypass loading on Winders.
#+BEGIN_SRC emacs-lisp
  ;; 2019-01-07: git-gutter depends on *nix "find" command, not found in Windows; dang it!
  ;; 2020-05-03: restructure, use ":bind" and ":hook"
  ;; 2020-05-05: config not working now, disable for now.
  (cond
   ((not (string-equal system-type "windows-nt"))
    (progn
      (use-package git-gutter-fringe
        :ensure t
        :disabled
        :defer 1
        :diminish
        :bind (("M-p" . git-gutter:previous-hunk)
               ("M-n" . git-gutter:next-hunk)
               ("C-x v s" . git-gutter:stage-hunk)
               ("C-x v r" . git-gutter:revert-hunk)
               ("C-x v SPC" . git-gutter:mark-hunk))
        :hook (magit-post-refresh . git-gutter:update-all-windows)
        :config (
                 (set-face-foreground 'git-gutter:modified "yellow")
                 (set-face-foreground 'git-gutter:added    "green")
                 (set-face-foreground 'git-gutter:deleted  "red")
                 (custom-set-variables
                  '(git-gutter:update-interval 2)
                  '(git-gutter:window-width 2)
                  '(git-gutter:lighter "GG")
                  '(git-gutter:modified-sign "<>") ;; two space
                  '(git-gutter:added-sign "++")    ;; multiple character is OK
                  '(git-gutter:deleted-sign "--"))
                 (global-git-gutter-mode))))))
#+END_SRC

*** Helpful help commands
Ref: David Wilson's Emacs From Scratch repo: https://github.com/daviwil/emacs-from-scratch/blob/master/Emacs.org
2021-06-21: Not using Counsel any more, and Consult doesn't have similar commands, remap straight Emacs to helpful.
#+begin_src emacs-lisp
  (use-package helpful
    :commands (helpful-callable helpful-variable helpful-command helpful-key)
    :bind
    ([remap describe-function] . helpful-callable)
    ([remap describe-command] . helpful-command)
    ([remap describe-variable] . helpful-variable)
    ([remap describe-key] . helpful-key))
#+end_src
*** Highlight-thing
- Highlights all occurrances of the "thing" under point.  Pretty useful in some cases, not all the time, so providing toggles. Can toggle with either "C-<f3>" or via Toggles menu.
#+begin_src emacs-lisp
  (use-package highlight-thing
    :ensure t
    :defer 2
    :diminish
    :config
    (setq highlight-thing-what-thing 'word)
    (setq highlight-thing-case-sensitive-p nil)
    :bind ("C-<f3>" . highlight-thing-mode))
#+end_src

*** Htmlize and more
 *Ensure "htmlize" is available for Org mode*
 This is a package not available when Emacs is compiled from source (mine), but is required by Org mode to export to HTML.
#+BEGIN_SRC emacs-lisp
  (use-package htmlize
    :ensure t
    :defer 2
    :commands aeh-html-stuff-mode
    :diminish)

  ;; 2020-09-07: adding custom package; 2020-09-08: make non-Windows (not work)
  (cond ((not (string-equal system-type "windows-nt"))
         ;; (load "aeh-html-stuff")
         (require 'aeh-html-stuff)
         (add-hook 'html-mode-hook 'aeh-html-stuff-mode)))
#+END_SRC

*** Hungry-delete
Had plain hungry-delete which didn't appear to allow for "normal" deletion, so tried this, which is crud as it prevents backspacing in the minibuffer during find-file operations; NOT GOOD!. Disabling all.
#+begin_src emacs-lisp
  (use-package smart-hungry-delete
    :disabled
    :bind (("<backspace>" . smart-hungry-delete-backward-char)
           ("M-d" . smart-hungry-delete-forward-char))
    :defer nil ;; dont defer so we can add our functions to hooks 
    :config (smart-hungry-delete-add-default-hooks))
#+end_src
*** Lispy
Lispy is [[https://github.com/abo-abo][Oleh Krehel]] (aka "abo-abo") version of Paredit, a parentheses-matching package for Lisp.  As Oleh is also an Evil user, he already had a number of key-mappings which are very vim-like.

This setup is translated from or taken from [[https://github.com/abo-abo/lispy#configuration-instructions][Lispy's Github page]].
2022-08-27: Again, really don't use this so commenting out.
#+BEGIN_SRC emacs-lisp
  ;; (use-package lispy
  ;;   :ensure t
  ;;   :disabled
  ;;   :diminish
  ;;   :config
  ;;   ;; One can use "M-:" - eval-expression to use lispy in the mini-buffer during eval-expression
  ;;   (defun conditionally-enable-lispy ()
  ;;     (when (eq this-command 'eval-expression)
  ;;       (lispy-mode 1)))
  ;;   (add-hook 'minibuffer-setup-hook 'conditionally-enable-lispy)
  ;;   (add-hook 'emacs-lisp-mode-hook (lambda () (lispy-mode 1))))
#+END_SRC

*** LSP, Flycheck, jedi and all things Python
Flycheck does syntax checking for multiple languages.
2020-06-18: Begin to add Python support.
2020-06-23: Move Elpy into this section.
2021-02-22: Disabled Elpy as using LSP only, save code but move to end of section.
#+begin_src emacs-lisp
  ;; Ref: https://emacs.stackexchange.com/questions/39241/flycheck-on-windows-python-pycompile-output-contained-no-errors
  (defun aeh/flycheck-parse-output (output checker buffer)
    "Strip carriage return characters from flycheck output"
    (let ((sanitized-output (replace-regexp-in-string "\r" "" output))
          )
      (funcall (flycheck-checker-get checker 'error-parser) sanitized-output checker buffer)))
  ;; Ref: https://www.flycheck.org/en/latest/languages.html#python
  ;; "Flycheck checks Python with python-flake8 or python-pylint,
  ;; and falls back to python-pycompile if neither of those is available."
  (use-package flycheck
    :ensure t
    :diminish
    :hook
    (shell-mode . flycheck-mode)
    (python-mode . flycheck-mode)
    :config
    ;; 2020-06-18: Work laptop has only python 3.7.7 as "python", Linux needs "python3"
    ;; 2020-06-23: Found that while Windows can "python", Flycheck still needs defined as "python3"
    ;; 2020-07-06: Reinstalled Python 3.7.7 as 32 bit, only executes as "python"
    (setq flycheck-python-pylint-executable "python")
    (when (string-equal system-type "windows-nt")
      (advice-add #'flycheck-parse-output :override #'aeh/flycheck-parse-output))
    )

  ;; 2020-07-14: Trying lsp-mode
  ;; Ref: https://emacs-lsp.github.io/lsp-mode/page/installation/
  ;; set prefix for lsp-command-keymap (few alternatives - "C-l", "C-c l")
  ;; (setq lsp-keymap-prefix "C-c C-c l")
  ;; 2021-02-22: Ref: https://github.com/daviwil/emacs-from-scratch/blob/6d078217a41134cc667f969430d150c50d03f448/Emacs.org
  ;; 2021-03-02: Ref: https://emacs-lsp.github.io/lsp-mode/page/installation/

  ;; (defun aeh--lsp-mode-setup ()
  ;;   (interactive)
  ;;   (setq lsp-headerline-breadcrumb-segments '(path-up-to-project file symbols))
  ;;   (lsp-headerline-breadcrumb-mode))

  (use-package lsp-mode
    :diminish
    :commands (lsp lsp-deferred)
    :hook  (python-mode . lsp-deferred)
    :init (setq lsp-keymap-prefix "C-l")
    :custom (lsp-headerline-breadcrumb-enable t)
    :config (lsp-enable-which-key-integration t))

  ;; 2021-02-22: update config from "daviwil"
  (use-package lsp-ui
    :diminish
    :hook (lsp-mode . lsp-ui-mode)
    :custom (lsp-ui-doc-position 'right))  ;; original was at bottom

  ;; 2021-02-22: update config from "daviwil"
  (use-package lsp-treemacs
    :diminish
    :after lsp)

  ;;------------------------------------------------------------------------------
  ;; 2022-08-05: Trying to fix errors after new PC and Python installed in weird
  ;; directory "C:\Users\frst6889\AppData\Local\Programs\Python\Python310\".
  ;; Ref: https://stackoverflow.com/questions/37720869/emacs-how-do-i-set-flycheck-to-python-3
  ;; NOTE: I don't have executable python3.exe, just python.exe
  ;; NOTE: ALSO created DOS environment variable "PYTHONPATH" to installed path.
  (setq flycheck-python-flake8-executable "python"
        flycheck-python-pycompile-executable "python"
        flycheck-python-pylint-executable "python")
  ;;------------------------------------------------------------------------------

  ;; Move elpy to this section.
  ;; Ref:  https://github.com/jorgenschaefer/elpy
  ;; 2020-07-08: setup elpy for using company; see company section for additions.
  ;; Ref: https://medium.com/analytics-vidhya/managing-a-python-development-environment-in-emacs-43897fd48c6a
  ;; 2020-07-14: disable to try lsp-mode
  (use-package elpy
    :diminish
    :disabled
    :hook ((python-mode . company-mode))
    :config
    (advice-add 'python-mode :before 'elpy-enable)
    ;; Ref: https://elpy.readthedocs.io/en/latest/ide.html#interactive-python
    (setq
     ;; 2020-07-06: Reinstalled Python, now in C:/Python/Python37-32. The rest looks OK.
     ;; 2020-07-08: Ref: https://linuxhint.com/configuring_emacs_python/
     ;; This led to installing ipython, which also installed jedi. The ipython changes the
     ;; shell-interpreter% variables.
     ;; python-shell-interpreter "python"
     ;; python-shell-interpreter-args "-i"
     python-shell-interpreter "ipython"
     python-shell-interpreter-args "-i --simple-prompt"
     python-indent-guess-indent-offset t
     python-indent-guess-indent-offset-verbose t)
    ;; 2020-07-08: as now not specifying Windows paths/executables, can make generic.
    (setq
     elpy-rpc-pythonpath (file-name-directory (locate-library "elpy"))
     ;; 2020-07-09: set elpy to use jedi in backend
     elpy-rpc-backend "jedi"
     flycheck-flake8rc "~/.flake8"
     python-check-command (executable-find "flake8")
     flycheck-python-flake8-executable (executable-find "flake8")))

#+end_src

*** Magit
Obviously, no one using Emacs can live without having Magit, so here's where we will install and configure it.

2018-12-21: Added magit-gitflow to the config, [[https://gitlab.com/buildfunthings/emacs-config/blob/master/loader.org][ref.]]
2018-12-24: Added property "commands".
#+BEGIN_SRC emacs-lisp
  (use-package magit
      :ensure t
      :diminish
      :commands (magit-status)
      :bind ("C-x g g" . magit-status)
      ("C-x g b" . magit-blame)
      ("C-x g c" . magit-branch-checkout)
      ("C-x g l" . magit-log-buffer-file)
      )
  (setq magit-push-always-verify nil)
  (setq git-commit-summary-max-length 50)
  (use-package magit-gitflow
    :ensure t
    :after magit
    :diminish
    :hook (magit-mode . turn-on-magit-gitflow))
#+END_SRC

*** Minions
Minions manages the minor modes "menu" which lists enabled minor modes.
#+begin_src emacs-lisp
  (use-package minions
    :ensure t
    :defer 1
    :config (minions-mode 1))
#+end_src
*** Modus vivendi
Prot's excellent themes.
#+begin_src emacs-lisp
  (use-package modus-vivendi-theme
    :ensure t
    :pin gnu)
#+end_src

*** Neotree
I have tried Neotree and found it fairly useful, so will try out an install.

Here is some documentation for the package:
-	F8 - toggle Neotree on/off 
-	H - toggle showing hidden files/directories 
-	RET/TAB/SPC - Fold/Unfold if directory, open if file. 
-	g - refresh view 
-	A - Maximize/minimize Neotree window. 
-	C-c C-n - Create file or directory if name ends "/" 
-	C-c C-d - Delete a file/directory 
-	C-c C-r - Rename a file/directory 
-	C-c C-p - Copy a file or directory 
-	C-c C-c - Change the "root" directory to that of point. (If root is "/home/arnold" and point on "..", C-c C-c will change "root" to "/home"

#+begin_src emacs-lisp
  (use-package neotree
    :disabled
    :after evil
    :defer 2
    :diminish
    :config
    (progn
      (global-set-key [f8] 'neotree-toggle)
      ;; The wiki ("https://www.emacswiki.org/emacs/NeoTree#toc12") notes that keybindings
      ;; are not naturally compatible, so add some bindings for Newtree under evil.
      (evil-define-key 'normal neotree-mode-map (kbd "TAB") 'neotree-enter)
      (evil-define-key 'normal neotree-mode-map (kbd "SPC") 'neotree-quick-look)
      (evil-define-key 'normal neotree-mode-map (kbd "q") 'neotree-hide)
      (evil-define-key 'normal neotree-mode-map (kbd "RET") 'neotree-enter)
      (evil-define-key 'normal neotree-mode-map (kbd "g") 'neotree-refresh)
      (evil-define-key 'normal neotree-mode-map (kbd "n") 'neotree-next-line)
      (evil-define-key 'normal neotree-mode-map (kbd "p") 'neotree-previous-line)
      (evil-define-key 'normal neotree-mode-map (kbd "A") 'neotree-stretch-toggle)
      (evil-define-key 'normal neotree-mode-map (kbd "H") 'neotree-hidden-file-toggle)))
#+end_src

*** Origami 
It took a *lot* of reading to find out that Origami does, in fact, support a Vim-style "fold-method=marker", This [[https://github.com/gregsexton/origami.el#can-i-override-the-folding-parser-for-an-individual-file][section]] indicates an Emacs tag can be placed in a file to indicate fold style, but that is the only mention of the variable. A Reddit [[https://www.reddit.com/r/emacs/comments/5ei7wa/awesome_vimlike_folding_for_evilmode_with_markers/][article]] showed that the variable can be used in a different way, being set in a "prog-mode-hook" instead. Note: I'm putting everything together here, so if it needs to be commented out, all the configuration is together.  I've attempted to put this with the rest of the packages, but this setup uses "evil-define-key", and always gets an error as it's loaded before Evil.  So, forced to put it here.

NOTE: As *usual*, others configuration is incorrect, as they use ":config" instead of ":init" and the code is not executed correctly. I also found I needed to add several more bindings, as by default "origami-close-all-nodes" is not bound to any keys.

2018-12-01: Created aeh-origami.el to segregate anything to do with origami to debug the latest error which began 11/24/2018. Yeah, forget that. I think I've found the exact problem. I've been testing with files that Kavitha created, and they have unbalanced fold markers; I *know*, because I fixed her foulups in one package body, but I'm sure she fouled up the spec as well--and I've been playing with the spec.  A spec that *I* created is fine...dangit!!!  So now, use the Origami config below, and work on how to deal with large files, and that annoying preference of Projectile to use Ido instead of Swiper; there must be a way to fix that.

2018-12-02: Created a fold-marker free version of the Rule Engine package, and it opens instantly and has no slowness whatsoever.  Ergo, the sole problem with large files is with Origami.

2019-05-22: Chased down an issue with Origami fold markers affecting Emacs 'query-replace' function (which Evil substitution translates into). If a file is opened in prog-mode (and I have a prog-mode-hook for origami-mode) and there are fold markers, substitution fails. I have fold markers in TXT files, which do NOT open in prog-mode, and no errors--unless I set prog-mode before the substitution.  Weirdly, I found that if I toggle off origami-mode, and toggle it back on again, no errors.  Naturally, if I get the error, I can toggle off and redo the substitution (which then works), and I can toggle back on.  So, I move the Origami config up to the packages section; tried to get rid of the defun but cannot at this time--it seems 'orgiami-toggle-node' requires the two arguments to work.

#+BEGIN_SRC emacs-lisp
  ;; 2020-06-26: create new function
  (defun ah--set-origami-fold-style-braces ()
    "Set origami fold-style to triple braces
  "
    (interactive)
    (if (bound-and-true-p display-line-numbers-mode)
        (message "Already displaying line numbers")
      (display-line-numbers-mode))
    (setq-local origami-fold-style 'triple-braces)
    (origami-mode)
    (origami-close-all-nodes (current-buffer)))
  ;; Step 1, define a "wrapper" function.
  (defun aeh/origami-toggle-node ()
    (interactive)
    (save-excursion ;; leave point where it is
      (goto-char (point-at-eol))             ;; then go to the end of line
      (origami-toggle-node (current-buffer) (point))))                 ;; and try to fold
  ;; ;; Step 2, install Origami.
  (use-package origami
    :ensure t
    :defer 1
    :diminish)
  (add-hook 'prog-mode-hook
            (lambda ()
              (setq-local origami-fold-style 'triple-braces)
              ;; (setq origami-fold-style 'triple-braces)
              (origami-mode)
              (origami-close-all-nodes (current-buffer))))
#+END_SRC

*** Paradox
This package has several improvements to the package menu, allowing better updating of existing packages.
Ref: https://github.com/Malabarba/paradox
#+begin_src emacs-lisp
  ;; 2020-05-20: "spinner-1.7.3" not in MELPA, latest upgrade butchered code and
  ;; paradox fails with error without it. Works in Linux (somehow), but need to
  ;; remove from Windows config for the time being.
  ;; 2022-07-22: Installed on new PC, works now with spinner-1.7.4 installed.
  (use-package paradox
    :ensure t
    :defer 2
    :diminish
    :config (paradox-enable))

#+end_src
*** Projectile
 Projectile is an excellent project manager because it automatically recognizes directories with a ".git" directory as *projects* and treats them as a "whole", so searching for/jumping to another file in the project is simple. It can be greatly enhanced by other packages as well.
 Some basic Projectile commands:
 - "C-p D" Opens the root of the project in dired
 - "C-p C-h" Display help of Projectile's key bindings
 - "C-p b" Display list of all project buffers currently open
 - "C-p 4 b" Display list of open project buffers and jump to selected buffer in another window
 - "C-p 5 b" Display list of open project buffers and jump to selected buffer in another frame
 - "C-p left" Switch to the previous project buffer
 - "C-p right" Switch to the next project buffer
 - "C-p ESC" Switch to the most recently selected project buffer
 - "C-p k" Kills *all* project buffers
 - "C-p f" Display list of files in current project; use "F" instead for all files in all projects
 - "C-p 4 f" Display list of files in current project and jump to selected file in another window
 - "C-p 5 f" Display list of files in current project and jump to selected file in another frame
 - "C-p g" Display list of all files at point in current project (useful in C, C++, Java, etc.
 - "C-p d" Display a list of all directories in the current project; use "D" instead for all directories in all projects
 - "C-p D" Opens the root of the project in dired
 - "C-p 4 D" Opens the root of the project in dired in another window
 - "C-p 5 D" Opens the root of the project in dired in another frame
 - "C-p p" Display list of known projects to switch project
 - "C-p s g" Run grep on the files in the project
 - "C-p S" Save *all* project buffers
 - "C-p r" Run interactive query-replace on all files in project
 - "C-p m" Invoke a command via the Projectile Commander

 *Enable Projectile globally*
 #+BEGIN_SRC emacs-lisp
   (use-package projectile
     :ensure t
     :diminish
     :defer 1
     ;; To pin to melpa-stable, need to edit init.el to add the stable repository
     :pin melpa-stable
     :bind ((:map projectile-mode-map ("s-p" . projectile-command-map))
            (:map projectile-mode-map ("C-c p" . projectile-command-map)))
     :config
     (projectile-mode +1)
     ;; I do NOT need this right now, but someone might, someday.
     ;; (global-set-key (kbd "<f5>") 'projectile-compile-project)
     ;; 2021-05-22: restructuring completion framework.
     ;; (setq projectile-completion-system 'ivy)
   )
 #+END_SRC

*** Relative line numbering
I usually want *any* type of programming buffer to show line numbers, and I've become used to relative line numbering. This sets it up using a package and a hook for prog-mode.

2018-12-02: Research into slowness in large SQL files in Origami kept leading back to use of "linum" with Origami, and of course Relative Linum uses linum. Initially, I removed all fold marker lines from the Rule Engine, had no problems with Origami then, but had no relative line numbers, which is *also* a bad thing. The Issues page for Origami said linum is a problem, testing the folded file *without* relative linum was also successful, so the issue is definitely linum.

However, the documentation shows [[https://github.com/coldnew/linum-relative#backends][this]], which says with version 0.6 of linum-relative, I can set variable "linum-relative-backend" to "display-line-numbers-mode" which is implemented in C which gives *MUCH* better performance. However, this *ALSO* requires Emacs 26.1+, available for Linux/Mac/Windows since its release (5/28/2018); I may need to upgrade both Mac and work installations--Linux is already 26.1.

2019-08-22: Stopped using linum-relative, using display-line-numbers-mode exclusively, set "display-line-numbers-type" to "visual"; this works well with folding.

*** Rainbow-mode
Very useful if working web or game development--or theme development--when this minor mode is active, it will automatically display the appropriate color for each hexadecimal code which resembles a color code, i.e. "#CF6A4C".
#+BEGIN_SRC emacs-lisp
  (use-package rainbow-mode
    :ensure t
    :defer 3
    :diminish
    :hook ((prog-mode . rainbow-mode)
           (org-mode . rainbow-mode)))
#+END_SRC

*** Scratch
2020-08-04: yesterday saw a new Protesilaos Stavrou video which had a number of misc. functions, and this was part of it all.
Ref: https://protesilaos.com/codelog/2020-08-03-emacs-custom-functions-galore/
Copying all directly from this site (this site code will NOT change):
2022-08-27: Really don't use this, so commenting.
#+begin_src emacs-lisp
  ;; Package by Ian Eure (ieure on GitHub)
  ;; (use-package scratch
  ;;   :ensure
  ;;   :config
  ;;   (defun prot/scratch-buffer-setup ()
  ;;     "Add contents to `scratch' buffer and name it accordingly."
  ;;     (let* ((mode (format "%s" major-mode))
  ;;            (string (concat "Scratch buffer for: " mode "\n\n")))
  ;;       (when scratch-buffer
  ;;         (save-excursion
  ;;           (insert string)
  ;;           (goto-char (point-min))
  ;;           (comment-region (point-at-bol) (point-at-eol)))
  ;;         (forward-line 2))
  ;;       (rename-buffer (concat "*Scratch for " mode "*") t)))
  ;;   :hook (scratch-create-buffer-hook . prot/scratch-buffer-setup)
  ;;   :bind ("C-c s" . scratch))
#+end_src

*** Smartparens
Will try out Smartparens for a while, from 2019-04-14.
#+begin_src emacs-lisp
  (use-package smartparens
    :ensure t
    ;; :defer 1
    :demand
    :diminish (smartparens-mode)
    :config
    ;; Stop pairing single quotes in elisp
    (sp-local-pair 'emacs-lisp-mode "'" nil :actions nil)
    (smartparens-global-mode 1))
#+end_src

*** Spaceline
 Uncle Dave says, "The modeline is the heart of emacs, it offers information at all times, it’s persistent and verbose enough to gain a full understanding of modes and states you are in."

 I tend to agree.  However, Uncle Dave uses Emacs as a "desktop environment replacement", which I never intend to do. So he wants to put in things like battery life and other system info...I do not. Also, he places setup of the "diminish" package at the bottom of the configuration, whereas I will intend to use the ":diminish" feature of "use-package" to set configuration for modeline text.

 What we *both* agree on though, is that Spaceline as a modeline enhancer is the best!

 *Spaceline!*
 I again agree with Uncle Dave, Spacemacs is pretty bloated, particularly on Windows, but their themes and the spaceline utility is superb! This setup works well with the chosen theme.
 
2022-07-23: Spaceline setup here became hard to manage. I had created a "aeh-myownmodeline" at some point (loading on Linux only), and cannot even find the file now. At some point, I had a new "aeh-spaceline" that worked well on both Linux and Windows. On 2022-07-22, I upgraded my Linux packages set and broke spaceline in Linux, so turned it off. Now will remove all the commented cruft which has been commented for a couple years now and execute "aeh-spaceline.el" on Windows, and create something new for Linux.
 #+BEGIN_SRC emacs-lisp
   (if (string-equal system-type "windows-nt")
        (load "aeh-spaceline")
     (load "aeh-myownmodeline"))
    #+END_SRC

*** Treemacs file manager
Uncle Dave has switched from Treemacs to Sunrise-Commander; I'm not sure why, as using his default configuration, I could not get it to work.  Not sure where he's going there. [9/2/2018] As of today, MELPA does not have sunrise-commander, so back to Treemacs. Note that must also include treemacs-evil, and treemacs-projectile to get full functionality. Will initially use configuration from [[https://github.com/Alexander-Miller/treemacs][Github site]].

Found Reddit page noting icons for treemacs, found new package to assist: https://www.reddit.com/r/emacs/comments/dhrl56/post_your_emacsscreenshot_here/

2019-11-05: Change binding to "M-<f2>" to activate Treemacs so I can use "C-c t" for other things.  Also, I don't use Treemacs, so set to disabled.

#+BEGIN_SRC emacs-lisp
  (if (string-equal system-type "windows-nt")
      (setq python-string "python")
      (setq python-string "python3"))
  (use-package treemacs
    :ensure t
    ;; :disabled
    :defer t
    :commands (treemacs)
    :bind (("M-<f2>" . treemacs))
    (:map global-map
          ("M-0"       . treemacs-select-window)
          ("C-x t 1"   . treemacs-delete-other-windows)
          ("C-x t t"   . treemacs)
          ("C-x t B"   . treemacs-bookmark)
          ("C-x t C-t" . treemacs-find-file)
          ("C-x t M-t" . treemacs-find-tag))
    :diminish " U"
    :init
    (with-eval-after-load 'winum
      (define-key winum-keymap (kbd "M-0") #'treemacs-select-window))
    :config
    (progn
      (setq treemacs-collapse-dirs              (if (executable-find python-string) 3 0)
            treemacs-deferred-git-apply-delay   0.5
            treemacs-display-in-side-window     t
            treemacs-file-event-delay           5000
            treemacs-file-follow-delay          0.2
            treemacs-follow-after-init          t
            treemacs-follow-recenter-distance   0.1
            treemacs-goto-tag-strategy          'refetch-index
            treemacs-indentation                2
            treemacs-indentation-string         " "
            treemacs-is-never-other-window      nil
            treemacs-no-png-images              nil
            treemacs-project-follow-cleanup     nil
            treemacs-persist-file               (expand-file-name ".cache/treemacs-persist" user-emacs-directory)
            treemacs-recenter-after-file-follow nil
            treemacs-recenter-after-tag-follow  nil
            treemacs-show-hidden-files          t
            treemacs-silent-filewatch           nil
            treemacs-silent-refresh             nil
            treemacs-sorting                    'alphabetic-desc
            treemacs-space-between-root-nodes   t
            treemacs-tag-follow-cleanup         t
            treemacs-tag-follow-delay           1.5
            treemacs-width                      35)

      ;; The default width and height of the icons is 22 pixels. If you are
      ;; using a Hi-DPI display, uncomment this to double the icon size.
      (treemacs-resize-icons 44)

      (treemacs-follow-mode t)
      (treemacs-filewatch-mode t)
      (treemacs-fringe-indicator-mode t)
      (pcase (cons (not (null (executable-find "git")))
                   (not (null (executable-find python-string))))
        (`(t . t)
         (treemacs-git-mode 'extended))
        (`(t . _)
         (treemacs-git-mode 'simple))))
    :bind
    )

  (use-package treemacs-evil
    :after treemacs evil
    ;; :disabled
    :ensure t)

  (use-package treemacs-projectile
    :after treemacs projectile
    ;; :disabled
    :ensure t)

  ;; 2019-10-16: added package
  (use-package treemacs-icons-dired
    :after treemacs dired
    ;; :disabled
    :ensure t
    :config (treemacs-icons-dired-mode))
#+END_SRC

*** Try
The try package allows one to "try" other packages without really installing them.  To use, "M-x try RET some-package".

#+begin_src emacs-lisp
  (use-package try
    :ensure t
    :defer 3
    :diminish)
#+end_src

*** Undo-fu
See Reddit: https://www.reddit.com/r/emacs/comments/epehfg/rfc_undohist_updated/ for details, his undo-fu looks promising.
#+begin_src emacs-lisp
  (use-package undo-fu
    :ensure t
    :after evil
    :defer 1
    :bind ((:map evil-normal-state-map ("u" . undo-fu-only-undo))
           (:map evil-normal-state-map ("C-r" . undo-fu-only-redo)))
    ;; :config
    ;; (message "Loaded Undo-fu.")
    ;; (global-undo-tree-mode -1)
    )
  (use-package undo-fu-session
    :ensure t
    :after evil
    :defer 1
    :config
    (progn
      (setq undo-fu-session-incompatible-files '("/COMMIT_EDITMSG\\'" "/git-rebase-todo\\'"))
      (if (file-directory-p "~/.emacs.d/undo-fu-session")
          (setq undo-tree-history-directory-alist '(("." . "~/.emacs.d/undo-fu-session")))
        (progn
          (dired-create-directory "~/.emacs.d/undo-fu-session")
          (setq undo-tree-history-directory-alist '(("." . "~/.emacs.d/undo-fu-session")))))
      (global-undo-fu-session-mode 1)))
#+end_src

*** Wgrep
2019-04-21: Installed Silver Searcher on home laptop, and will attempt to do the same on Windows laptop at work. I reviewed the "Using Emacs #48 - Silversearcher" which includes the Wgrep package.  These two work together pretty well; Silversearcher finds files with text and places into a buffer, while wgrep can edit that buffer, saving the changes back into the files the original search terms found.
#+begin_src emacs-lisp
  (use-package wgrep
    :ensure t
    :defer 1
    :diminish)

  (use-package wgrep-ag
    :ensure t
    :after ag
    :defer 1
    :diminish)
#+end_src

*** Which-key
This is one of the best packages in Emacs, and takes advantage of the self-documenting nature of Emacs. After starting to input a command, which-key will open the mini-buffer at the bottom of the screen and show the next possible keys for completing the command, with notation of what the next key will do.  Fantastic package!
#+BEGIN_SRC emacs-lisp
  (use-package which-key
    :ensure t
    :init (which-key-mode)
    :diminish (which-key-mode)
    :config
    (setq which-key-side-window-location 'bottom
          which-key-sort-order #'which-key-key-order-alpha
          which-key-sort-uppercase-first nil
          which-key-add-column-padding 1
          which-key-max-display-columns nil
          which-key-min-display-lines 6
          which-key-side-window-slot -10
          which-key-side-window-max-height 0.25
          which-key-idle-delay 0.8
          which-key-max-description-length 25
          which-key-allow-imprecise-window-fit nil
          which-key-separator " → "))
#+END_SRC

*** WS-Butler 
This is a package suggested by EditorConfig, to trim trailing whitespace ONLY on changed lines.
2019-10-28: Change prog-mode-hook to multiple hooks as do NOT want text mode butlered.
2020-05-03: Change method from config to hook: https://github.com/jwiegley/use-package#hooks
#+begin_src emacs-lisp 
  (use-package ws-butler
    :ensure t
    :defer 2
    :diminish
    :hook ((sql-mode . ws-butler-mode)
           (sh-mode . ws-butler-mode)
           (emacs-lisp-mode . ws-butler-mode)))
#+end_src

*** Yasnippet
This is the "Snippets" [[https://www.emacswiki.org/emacs/Yasnippet][package]] for Emacs, rather ubiquitous and easy to use. Snippet files should go into ~/.emacs.d/private/snippets. The configuration here is mostly from Uncle Dave. Check out the [[https://github.com/joaotavora/yasnippet][Github account]] for additional configuration tips. 
#+BEGIN_SRC emacs-lisp
  (use-package yasnippet
    :ensure t
    :diminish 'yas-minor-mode
    ;; 2021-02-09: add hooks to (hopefully) invoke autoloads when modes entered.
    :hook ((prog-mode . yas-minor-mode)
           (text-mode . yas-minor-mode)
           )
    :config
    ;; 2020-05-21: latest yasnippet update getting warnings for updating via backquoted code
    ;; this suppresses that warning
    ;; 2020-05-21 17:54:38: did NOT work on Linux, but found that using "push" DOES work.
    (unless (boundp 'warning-suppress-types)
      (setq warning-suppress-types nil))
    (push '(yasnippet backquote-change) warning-suppress-types)
    (setq yas-snippet-dirs '("~/.emacs.d/private/snippets"))
    (setq yas-indent-line 'fixed)
    (yas-global-mode 1))
  (use-package yasnippet-snippets
    :ensure t
    :after yasnippet)
#+END_SRC

** Hydras
NOTE: I am transferring *all* of the hydras to ~/.emacs.d/private/local/aeh-hydras.el.
*** Load aeh-hydras
Load the file "aeh-hydras.el"
#+BEGIN_SRC emacs-lisp
(load "aeh-hydras")
#+END_SRC

* Evil Mode
Note that all Evil mode must come last in the configuration as other packages need to load first else their config could override that of Evil.

Here is where all the Evil-mode configuration is kept.  A lot of this is taken from [[https://github.com/howardabrams/dot-files/blob/master/emacs-evil.org][Howard Abrams Evil configuration]].
More is taken from [[https://github.com/aaronbieber/dotfiles/blob/master/configs/emacs.d/lisp/init-evil.el][Aaron Biebers Evil configuration]].

Note that Evil Mode is a minor mode, and like all minor modes, minor modes loaded after others can override the settings of a previous one...ergo, load Evil and evil versions of plugins last.

** Evil-mode
*Start at the beginning*
#+BEGIN_SRC emacs-lisp
  (setq evil-want-keybinding nil)
  (use-package evil
    :ensure t
    ;; :init (setq evil-want-keybinding nil)
    :demand
    :config
    (evil-mode 1)

    ;; Do NOT have to use evil in every mode, so let's make a list where evil is not used.
    (dolist (mode '(ag-mode
                    flycheck-error-list-mode
                    paradox-menu-mode
                    git-rebase-mode))
      (add-to-list 'evil-emacs-state-modes mode))

    ;; Start in insert mode for small buffers
    ;; 2018-10-16: This was Howard's idea (I think), and it is *BAD*. Better to start in normal mode for most files
    ;; including org files...and text files (added 2019-05-28).
    (dolist (mode '(org-mode sql-mode lisp-mode text-mode))
      (add-to-list 'evil-normal-state-modes mode))

    ;; Well, this is not working, new text files still open in normal mode, but at least org opens in normal mode.
    ;; 2019-05-28: Removing as I do NOT want text files opened in Insert mode after all.
    ;; (dolist (mode '(text-mode))
    ;;   (add-to-list 'evil-insert-state-modes mode))

    (evil-add-hjkl-bindings eww-mode-map 'emacs
      (kbd "/")       'evil-search-forward
      (kbd "n")       'evil-search-next
      (kbd "N")       'evil-search-previous
      (kbd "C-f")     'evil-scroll-down
      (kbd "C-b")     'evil-scroll-up
      ;; (kbd "C-w C-w") 'other-window
      (kbd "C-w C-w") 'ace-window)

    :bind (:map evil-normal-state-map
                ;; Don't need 'q' to start recording a macro...
                ;; I'm more familiar with Emacs' way of doing things.
                ("q" . nil)
                ;; Why is 'f' line-bound?
                ;; Wanna rebind f to avy?
                ;; ("f" . iy-go-to-char)
                ;; ("F" . iy-go-to-char-backward)
                ;; How about avy to 't'?
                ;; ("t" . avy-goto-char-timer)
                ;; ("T" . avy-goto-word-timer)
                ;; Shame that meta keys don't work, so let's
                ;; use the 'z' prefix:
                ;; ("z," . ha/xref-pop-marker-stack)
                ("z." . find-tag)))
#+END_SRC

*Start adding packages*
The emacswiki [[https://www.emacswiki.org/emacs/Evil][page]] for Evil lists a bunch of plugins for evil mode.

** Evil-surround
Evil-surround is a port of Tim Pope's Surround vim package. I cannot live without it! Note: use "init" rather than "config", which doesn't "launch" the minor mode. Research shows this is because "init" code executes before the package loads, and "config" is after, and if the package is "lazily loaded", the "config" will not execute until after the lazy load. What John doesn't mention is that the entire purpose of "use-package" is to lazy load packages to speed up Emacs startup. So, "config" only occurs when the minor mode is specifically called. See help for the package, and review: bind, config, demand, and init. I could use both demand and config, or merely ensure and after (after evil-mode), and set "global-evil-surround-mode 1" as a separate sexp.
#+BEGIN_SRC emacs-lisp
  (use-package evil-surround
    :ensure t
    :diminish
    :after evil)
  (global-evil-surround-mode)
#+END_SRC

** Evil-commentary
Evil-commentary is a [[https://github.com/linktohack/evil-commentary][port]] of Tim Pope's Commentary
2019-06-29: should not be global, limit to prog-mode with hook.
#+BEGIN_SRC emacs-lisp
  (use-package evil-commentary
    :ensure t
    :diminish
    :after evil)
  ;; (evil-commentary-mode 1)
  (add-hook 'prog-mode-hook 'evil-commentary-mode)
#+END_SRC

** Evil-matchit
Evil-matchit is a [[https://github.com/redguardtoo/evil-matchit][port]] of Vim's (now native) matchit.
#+BEGIN_SRC emacs-lisp
  (use-package evil-matchit
    :ensure t
    :diminish
    :after evil)
  (global-evil-matchit-mode 1)
#+END_SRC

** Evil-exchange
Evil-exchange is a [[https://github.com/Dewdrops/evil-exchange][port]] of Tom McDonald's vim-exchange. I never used vim-exchange, but this looks promising.

This is pretty awesome.  In normal mode, "cx" plus motion keys will "select" the text to exchange, then moving to the other block, pressing "." will do the exchange in a single atomic transaction (one 'u' to undo). You can also select a block of text, "cx", then select the alternate block, and "cx" again to do the exchange.
#+BEGIN_SRC emacs-lisp
  (use-package evil-exchange
    :ensure t
    :diminish
    :after evil)
  (evil-exchange-cx-install)
#+END_SRC

** Evil-magit
OK, I forgot to add this until now...and setting up this configuration in git made me realize I had no Magit evil bindings. Whoops.  This should take care of it all, but will likely have to tweak the keybindings more later.

2019-09-05: This takes too long to start up 15+ seconds usually. Tweaked with ":after evil" which helped some, but still too long. Disabled then and tested Magit; the only change I noticed is that I could not use "hjkl" as usual. 

Native Magit: h=magit-dispatch, j=Prefix, k=magit-delete-thing, l=magit-log. Evil-magit sets variable "evil-magit-mode-map-bindings", when condition "evil-magit-want-horizontal-movement" section to reset keys: "h" -> "H", "l" -> "L", etc. I would be hard-pressed to get the same, so should get used to using "n" and "p" for vertical movement, or maybe arrows.

2021-02-16: After changing Magit to load on command 'magit-status', needed to set up hook for magit mode to correctly initialize evil-magit and get it to load correctly.
2021-03-04: As of 11/24/2020, evil-magit is NO LONGER MAINTAINED, use evil-collection instead. 
Ref: https://github.com/emacs-evil/evil-magit
#+BEGIN_SRC emacs-lisp
  (use-package evil-collection
     :after evil
     :demand
     :diminish
     :config (evil-collection-init))
#+END_SRC

** Evil-mc 
2019-10-30: trying evil-mc (multiple cursors) again as this does work, after I understand it better.  Will need to create a new toggle.
I do NOT want enable evil-mc globally, but only as needed. Mappings are:
- "C-c <f7>" will toggle evil-mc-mode on and off
- "C-n"/"C-p" mark next/previous occurrance as part of cursors
- "M-n"/"M-p" cycle through cursors
- "C-t" skip next occurrance of word
- "g r n"/"g r p" (in normal mode) to skip next or previous occurrance ("g r n" is equivalent to "C-t")
- "g r u" undo last cursor
- "g r q" quit all cursors

#+begin_src emacs-lisp
  (use-package evil-mc
    :ensure t
    :bind (("C-c <f7>" . evil-mc-mode)))
#+end_src

* Final Stuff
** Remap some keys
Let's do some evil mappings for dired-mode, found [[https://nathantypanski.com/blog/2014-08-03-a-vim-like-emacs-config.html][here]]. 12/21/2018: fixed the problem of not having General's SPC giving me menu by defining SPC in dired-mode-map to nil. This then allows General to take over, the local private map not having a mapping for SPC.

2019-05-24: Finally, figured out how to do the dang mapping for evil keys in dired--still in same reference doc, but making it look like the code for ibuffer-mode.  This now works well, though I'm not sure about the "n" and "N" mappings as I would be more likely to do a Swiper search than Evil search, hence these are wasted; comment out for now, as I'm still undecided.

2019-06-28: Had revert-buffer set to "g" at some point, somehow, but lost that change. Still cannot seem to "override" the evil-commentary key-binding for "g", so change here to "C-c C-r", which is a least mnemonic for "revert-buffer".  This works OK.  I still like having dired in evil, so better typing "C-c C-r" than "revert-buffer". Found that evil-commentary.el defines "gc" and "gy" at a "global level" for normal evil-commentary-mode-map; map is two dimensional, so "g" map first/prefix key level, and "c" and "y" under that. Best yet, set to "gg" so "g" will prefix to both evil-commentary and revert-buffer.

*** Global
#+begin_src emacs-lisp
  ;; 2021-03-29
  ;; Default for bookmarks is "\C-xrl" and there IS NO default for list-registers.
  ;; Give the lower-case "l" to list-registers and upper "L" to bookmarks
  (global-set-key "\C-xrL" 'bookmark-bmenu-list)
  (global-set-key "\C-xrl" 'list-registers)
  (global-set-key "\C-xc" 'calendar)
#+end_src
*** Dired
#+BEGIN_SRC emacs-lisp
  (eval-after-load 'dired
    '(progn
       (evil-set-initial-state 'dired-mode 'normal)
       (evil-define-key 'normal dired-mode-map
         (kbd "(") 'dired-hide-details-mode
         (kbd "j") 'dired-next-line
         (kbd "k") 'dired-previous-line
         (kbd "h") 'dired-up-directory
         (kbd "H") 'dired-hide-dotfiles-mode
         (kbd "l") 'dired-find-alternate-file
         (kbd "o") 'dired-find-file-other-window
         (kbd "s") 'dired-sort-toggle-or-edit
         (kbd "v") 'dired-toggle-marks
         (kbd "m") 'dired-mark
         (kbd "u") 'dired-unmark
         (kbd "U") 'dired-unmark-all-marks
         (kbd "c") 'dired-create-directory
         (kbd "q") 'kill-this-buffer
         (kbd "gg") 'revert-buffer
         (kbd "M-s") 'avy-goto-char-timer
         (kbd "W") 'evil-forward-WORD-begin
         (kbd "B") 'evil-backward-WORD-begin
         (kbd "E") 'evil-forward-WORD-end
         (kbd ")") 'dired-git-info-mode
         (kbd "n") 'dired-next-line
         (kbd "p") 'dired-previous-line
         )
       (define-key dired-mode-map (kbd "SPC") nil)
       )
    )
#+END_SRC

*** Ibuffer
Same kind of thing for ibuffer-mode as well, same link.
#+BEGIN_SRC emacs-lisp
  ;; (evil-define-key 'normal ibuffer-mode-map
  ;;   (kbd "m") 'ibuffer-mark-forward
  ;;   (kbd "t") 'ibuffer-toggle-marks
  ;;   (kbd "u") 'ibuffer-unmark-forward
  ;;   (kbd "=") 'ibuffer-diff-with-file
  ;;   (kbd "j") 'ibuffer-jump-to-buffer
  ;;   (kbd "M-g") 'ibuffer-jump-to-buffer
  ;;   (kbd "M-s a C-s") 'ibuffer-do-isearch
  ;;   (kbd "M-s a M-C-s") 'ibuffer-do-isearch-regexp)
  ;; Let's try doing the same with General:

  ;; Don't think this--or the above--does anything at all. "t" doesn't work, "T" doesn't work, only "~" toggles.
  ;; (general-define-key
  ;;  :states 'normal
  ;;  :keymaps 'ibuffer-mode-map
  ;;   "m" 'ibuffer-mark-forward
  ;;   "t" `ibuffer-toggle-marks
  ;;   "u" 'ibuffer-unmark-forward
  ;;   "=" 'ibuffer-diff-with-file
  ;;   "j" 'ibuffer-jump-to-buffer
  ;;   "M-g" 'ibuffer-jump-to-buffer
  ;;   "M-s a C-s" 'ibuffer-do-isearch
  ;;   "M-s a M-C-s" 'ibuffer-do-isearch-regexp)

  (defalias 'list-buffers 'ibuffer) ; make ibuffer default
#+END_SRC

*** Origami
Now do Origami keys.
#+begin_src emacs-lisp
  (evil-define-key 'normal prog-mode-map (kbd "TAB") 'aeh/origami-toggle-node)
  (evil-define-key 'normal origami-mode-map (kbd "TAB") 'aeh/origami-toggle-node)
  (define-key evil-normal-state-map "za" 'origami-forward-toggle-node)
  (define-key evil-normal-state-map "zR" 'origami-close-all-nodes)
  (define-key evil-normal-state-map "zM" 'origami-open-all-nodes)
  (define-key evil-normal-state-map "zr" 'origami-close-node-recursively)
  (define-key evil-normal-state-map "zm" 'origami-open-node-recursively)
  (define-key evil-normal-state-map "zo" 'origami-show-node)
  (define-key evil-normal-state-map "zc" 'origami-close-node)
  (define-key evil-normal-state-map "zj" 'origami-forward-fold)
  (define-key evil-normal-state-map "zk" 'origami-previous-fold)
#+end_src

*** Jumping to bookmarks, dired
Viewed a Xah Lee (see [[http://ergoemacs.org/emacs/emacs.html][Ergoemacs.org]] )video on efficiently opening files, and several good methods are just function calls I can tie to key bindings. Plus, I found a better way to bind keys than using "global-key-binding" with "kbd" functions--use "bind-key" instead; this comes along with the "use-package" function, so is already available.

The "bookmark-jump" function will present a list of bookmarks for Ivy to narrow, and jump to the one selected. The "dired-jump" function uses the currently opened file as a starting point, opens a buffer to dired in the file's directory and places point on the current file.

***-10-11: "counsel-recentf" is MUCH better than "recentf-open-files", so deleting the latter code.
2021-05-22: Beginning to use Consult in the Completions setups, so removing "bookmark-jump" from this setup.
#+begin_src emacs-lisp
  (bind-key "C-c d" 'dired-jump)
#+end_src

*** Scale text
2019-07-29: It's a PITA to have to remember the Windows hydra to increase/decrease text size, so here are some misc. global key bindings.
#+begin_src emacs-lisp
  (defun aeh/text-scale-reset ()
    "Wrapper for \"(text-scale-increase 0)\""
    (interactive)
    (text-scale-increase 0))
  (global-set-key (kbd "C-M--") 'text-scale-decrease)
  (global-set-key (kbd "C-+") 'text-scale-increase)
  (global-set-key (kbd "C-M-=") 'aeh/text-scale-reset)
#+end_src

*** Iedit
2019-11-01: Somehow lost keybindings to iedit, so put the main one back.
#+begin_src emacs-lisp 
  ;; (global-set-key (kbd "C-;") 'iedit-mode)
  (general-def prog-mode-map
    "C-;" 'iedit-mode)
#+end_src

*** Dwimming case
2019-11-05: Some dwim chords for region-based case.
2020-07-06: Move "capitalize-region" binding to here.
#+begin_src emacs-lisp
  (general-def
    :keymaps '(org-mode-map prog-mode-map)
  "C-c u" 'upcase-dwim
  "C-c l" 'downcase-dwim
  "C-c t" 'capitalize-dwim
  "C-x M-c" 'capitalize-region)
#+end_src

*** Isearch symbol-at-point
2020-07-06: added this chord, similar to Vim's "*". Can always use "C-r" after first found to search backward.
#+begin_src emacs-lisp
  (global-set-key (kbd "C-c *") 'isearch-forward-symbol-at-point)
#+end_src

** Org mode stuff
 Org mode is such an important part of Emacs it is now part of the "core" software. As such, there is no need for a "use-package" setup, but some common settings are good.
 2021-02-22: Put all the Org mode code together in one place.
 2019-01-07: Org templates are NOT working in Windows version. This is due to Org version 9.2, see "org-plus-contrib-20181230/org-version.el".
 Original code: '("el" "#+BEGIN_SRC emacs-lisp\n?\n#+END_SRC")

2021-02-23: Some weird things happened in the Jira org doc, the properties table display got displayed with larger font size, and I suspect it might be because the org-bullets block got moved before the org-temp block (which sets org-src-fontify-natively). Let's test by moving things around a bit.
2021-02-23: AND, the answer is: it has nothing to do with config, but changes to "org-plus-contrib" package. I ALSO did a package upgrade across the board, and went from 'org-plus-contrib-20200713' to 'org-plus-contrib-2021022'. After the upgrade I ended up with both in "elpa" directory; moved 2/22 version to 'archive' and it worked, swapped the two so 2/22 was active and got the same results, back to 7/13 and it works again. Updates to config does nothing, it's the version.

I got the code to beautify org mode [[https://zhangda.wordpress.com/2016/02/15/configurations-for-beautifying-emacs-org-mode/][here]].

2022-07-01: Update to use org-superstar, direct descendent of org-bullets, ref: https://github.com/integral-dw/org-superstar-mode
#+BEGIN_SRC emacs-lisp
  ;; 2021-02-23: Key to org starting collapsed is org-startup-folded, never set before, doing it here.
  (setq org-startup-folded t)
  (setq inhibit-compacting-font-caches t)

  (use-package org-bullets
    :defer 2
    :config
    (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))
    ;; make available "org-bullet-face" such that I can control the font size individually
    (setq org-bullets-face-name (quote org-bullet-face))
    (setq org-bullets-bullet-list '("✙" "♱" "♰" "☥" "✞" "✟" "✝" "†" "✠" "✚" "✜" "✛" "✢" "✣" "✤" "✥"))

    ;; (setq org-ellipsis "⚡⚡⚡")
    (setq org-ellipsis "▼▼▼")
    (custom-set-faces
     '(org-level-1 ((t (:inherit outline-1 :height 1.3))))
     '(org-level-2 ((t (:inherit outline-2 :height 1.2))))
     '(org-level-3 ((t (:inherit outline-3 :height 1.1))))
     '(org-level-4 ((t (:inherit outline-4 :height 1.0))))
     '(org-level-5 ((t (:inherit outline-5 :height 1.0)))))
    )

  ;; (use-package org-superstar
  ;;   :ensure
  ;;   :after org
  ;;   :hook (org-mode . org-superstar-mode)
  ;;   :config
  ;;   ;; (org-superstar-mode -1)
  ;;   (setq org-superstar-remove-leading-stars t)
  ;;   ;; (setq org-superstar-headline-bullets-list '(" ")) ;; '("??" "?" "?" "?")
  ;;   ;; (setq org-superstar-item-bullet-alist
  ;;   ;;       '((?+ . ?)
  ;;   ;;         (?* . ??)
  ;;   ;;         (?- . ?)))
  ;;   )
  ;; (add-hook 'org-mode-hook (lambda () (org-superstar-mode 1)))
#+END_SRC

 These are from UncleDavesEmacs: 
#+BEGIN_SRC emacs-lisp
  ;; 2019-12-16: add to template-alist.
  (require 'org-tempo)
  (add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
  ;; 2019-06-08: After loading ONE of MANY themes, the "fontify-natively" non-nil started
  ;; throwing code between source markers into horrid light colors regardless of theme used.
  ;; Setting the variable to nil gets rid of that tendency.
  (setq org-src-fontify-natively nil)
  (setq org-src-tab-acts-natively t)
  (setq org-confirm-babel-evaluate nil)
  (setq org-export-with-smart-quotes t)
  (setq org-src-window-setup 'current-window)                   ; Allows for "C-c '" to narrow to code being edited.
  ;; 2019-01-07: Updated to Org 9.2, this method now invalid, using yas-snippet instead.
  (add-hook 'org-mode-hook
              '(lambda ()
                 (visual-line-mode 1)
                 (org-indent-mode 1)))
  ;; (global-set-key (kbd "C-c '") 'org-edit-src-code)
  (general-def org-mode-map
    "C-c '" 'org-edit-src-code)
  ;; 2021-02-24: Adding SECOND org-ellipsis set after requiring org-tempo to see if this has effect.
  (setq org-ellipsis "▼▼▼")
#+END_SRC

Some global key bindings for Org mode, as shown in the [[https://orgmode.org/orgguide.pdf][compact Org Guide]].
#+begin_src emacs-lisp
  ;; The following lines are always needed. Choose your own keys.
  ;; 2022-10-16: I don't necessarily agree now commenting all, and if I ever need
  ;; them again, should use 'general-def' to define them and stick with specific
  ;; mode maps.
  ;; (global-set-key "\C-cl" 'org-store-link)
  ;; (global-set-key "\C-ca" 'org-agenda)
  ;; (global-set-key "\C-cc" 'org-capture)
  ;; (global-set-key "\C-cb" 'org-switchb)
#+end_src

For TODO tasks and states, reference: [[http://doc.norang.ca/org-mode.html#TasksAndStates][Org Mode - Oraganize Your Life In Plain Text]]
#+BEGIN_SRC emacs-lisp
  (setq org-todo-keywords
        (quote ((sequence "TODO(t)" "NEXT(n)" "ONGOING" "|" "DONE(d@/!)")
                (sequence "WAITING(w@/!)" "HOLD(h@/!)" "|" "CANCELLED(c@/!)" "PHONE" "MEETING"))))

  (setq org-todo-keyword-faces
        (quote (("TODO" :foreground "red" :weight bold)
                ("NEXT" :foreground "blue" :weight bold)
                ("ONGOING" :forground "yellow" :weight bold)
                ("DONE" :foreground "forest green" :weight bold)
                ("WAITING" :foreground "orange" :weight bold)
                ("HOLD" :foreground "magenta" :weight bold)
                ("CANCELLED" :foreground "forest green" :weight bold)
                ("MEETING" :foreground "forest green" :weight bold)
                ("PHONE" :foreground "forest green" :weight bold))))
  ;; More from http://pragmaticemacs.com/emacs/org-mode-basics-vii-a-todo-list-with-schedules-and-deadlines/
  ;;warn me of any deadlines in next 7 days
  (setq org-deadline-warning-days 7)
  ;;show me tasks scheduled or due in next fortnight
  (setq org-agenda-span (quote fortnight))
  ;;don't show tasks as scheduled if they are already shown as a deadline
  (setq org-agenda-skip-scheduled-if-deadline-is-shown t)
  ;;normal todo list - not sure I want to ignore deadlines/schedules
  ;; (setq org-agenda-todo-ignore-deadlines (quote all))
  ;; (setq org-agenda-todo-ignore-scheduled (quote all))
  ;;sort tasks in order of when they are due and then by priority
  (setq org-agenda-sorting-strategy
        (quote
         ((agenda deadline-up priority-down)
          (todo priority-down category-keep)
          (tags priority-down category-keep)
          (search category-keep))))
#+END_SRC

2021-02-16: Tangle dotemacs.org on save, Ref: https://github.com/daviwil/emacs-from-scratch/blob/9388cf6ecd9b44c430867a5c3dad5f050fdc0ee1/init.el
Unfortunately, this is not working correctly, cannot even 'org-babel-tangle', get "Tangled 0 blocks..."
2021-02-23: don't think this matters anymore with the file variables at EOF, so commenting out.
#+begin_src emacs-lisp
  ;; (defun aeh--org-babel-tangle-config()
  ;;   "Stole this code from Emacs From Scratch; seemed like a good idea at the time.
  ;;   Function will tangle ~/.emacs.d/dotemacs.org when executed.
  ;;   Add a hook (`after-save-hook') to execute when in org mode."
  ;;   (interactive)
  ;;   (message (concat "buffer-file-name: " (buffer-file-name)))
  ;;   (message (concat "to: " (expand-file-name "dotemacs.org" user-emacs-directory)))
  ;;   (when (string-equal (buffer-file-name)
  ;;                       (expand-file-name "dotemacs.org" user-emacs-directory))
  ;;     (message "Strings equal, should tangle now.")
  ;;     ;; Dynamic scoping to the rescue
  ;;     (let ((org-confirm-babel-evaluate t))
  ;;       (org-babel-tangle)
  ;;     )
  ;;     ))
  ;; (add-hook 'org-mode-hook (lambda () (add-hook 'after-save-hook #'aeh--org-babel-tangle-config)))
#+end_src

** Sane tabs-or-spaces
Nice little guide [[https://dougie.io/emacs/indentation/#using-tabs-or-spaces-in-different-files][here]]. These settings should get me to where I want (crossed fingers).
#+BEGIN_SRC emacs-lisp
  ;; Set the defaults, NO tabs
  (setq-default indent-tabs-mode nil)

  ;; Create a variable for our preferred tab width
  (setq custom-tab-width 2)

  ;; Two callable functions for enabling/disabling tabs in Emacs
  (defun aeh/disable-tabs ()
    "Custom function to disable tabs"
    (interactive)
    (setq indent-tabs-mode nil))
  (defun aeh/enable-tabs  ()
    "Custom function to enable tabs"
    (interactive)
    (local-set-key (kbd "TAB") 'tab-to-tab-stop)
    (setq indent-tabs-mode t)
    (setq tab-width custom-tab-width))

  ;; Hooks to Disable Tabs
  (add-hook 'lisp-mode-hook 'aeh/disable-tabs)
  (add-hook 'emacs-lisp-mode-hook 'aeh/disable-tabs)
  (add-hook 'sql-mode-hook 'aeh/disable-tabs)
#+END_SRC

** Personal functions
Here are a couple functions dealing with the configuration (org) file, to edit and reload.
*** Configuration functions
**** Config-edit
To edit the current ~/.emacs.d/dotemacs.org:
#+BEGIN_SRC emacs-lisp
(defun aeh/config-edit ()
"Edit (visit) file ~/.emacs.d/dotemacs.org"
  (interactive)
  (find-file "~/.emacs.d/dotemacs.org"))
(global-set-key (kbd "C-c e") 'aeh/config-edit)
#+END_SRC

**** Config-reload
To *reload* a newly edited ~/.emacs.d/dotemacs.org:
#+BEGIN_SRC emacs-lisp
  ;; 2021-05-24: I never use this and can certainly reuse the key chord.
  ;; (defun aeh/config-reload ()
  ;; "Reloads file ~/.emacs.d/dotemacs.org"
  ;;   (interactive)
  ;;   (org-babel-load-file (expand-file-name "~/.emacs.d/dotemacs.org")))
  ;; (global-set-key (kbd "C-c r") 'aeh/config-reload)
#+END_SRC

**** Automated bookmark save.
This tip from Prot is to automatically save any new bookmark to the bookmark file, rather than waiting until Emacs shuts down. He does this because he has frequent power outages, but I think it is a great prophylactic measure.
Ref: https://protesilaos.com/codelog/2023-06-28-emacs-mark-register-basics/
#+begin_src emacs-lisp
  ;; I want Emacs to write the list of bookmarks to the `bookmark-file'
  ;; as soon as I set a new bookmark.  The default behaviour of Emacs is
  ;; to write to the disk as a final step before closing Emacs.  Though
  ;; this can lead to data loss, such as in the case of a power failure.
  ;; Storing the data outright mitigates this problem.
  (defun prot/bookmark-save-no-prompt (&rest _)
    "Run `bookmark-save' without prompts.

  The intent of this function is to be added as an :after advice to
  `bookmark-set-internal'.  Concretely, this means that when
  `bookmark-set-internal' is called, this function is called right
  afterwards.  We set this up because there is no hook after
  setting a bookmark and we want to automatically save bookmarks at
  that point."
    (funcall 'bookmark-save))

  (advice-add 'bookmark-set-internal :after 'prot/bookmark-save-no-prompt)
#+end_src

*** Miscellaneous functions
**** Set Last modified timestamp
This is a rather well-known trick to switch to the previous buffer, well-suited to keep switching back and forth between two buffers.

2019-06-06: modified already, to work for org-mode (find "#+date: " string) or any other file with "Last modified: " string.
#+BEGIN_SRC emacs-lisp
  (defun aeh/set-last-modified-ts ()
    "Set new timestamp for \"Last modified: \" tag, or if in org-mode,
  the \"#+date: \" tag.  Function searches for string from point-min forward;
  when found, it deletes from point (at end of search string) to point-at-eol,
  then inserts current time in specified format. "
    (interactive)
    (if (equal major-mode 'org-mode)
        (save-excursion
          (goto-char (point-min))
          (when (search-forward "#+date: " nil t)
            ;; It appears I do NOT need a lambda here, just execute two functions on when()
            (delete-region (point) (point-at-eol))
            (let ((current-prefix-arg '(16)))
              (call-interactively 'org-time-stamp))))
      (save-excursion
        (goto-char (point-min))
        (when (search-forward "Last modified: " nil t)
          ;; It appears I do NOT need a lambda here, just execute two functions on when()
          (delete-region (point) (point-at-eol))
          (insert (format-time-string "%a %b %d, %Y %-H:%M:%S"))))))
  ;; Set hook to execute function before writing.
  (add-hook 'before-save-hook
            (lambda () (aeh/set-last-modified-ts)))
#+END_SRC
**** Cleaning the buffer
This stuff is stolen code from Magnar Sveen, from his What The Emacs blog (http://whattheemacsd.com). It is pretty self explanatory. It could be pretty helpful (knowing how OCD I am about not using tabs or having trailing spaces.)

#+begin_src emacs-lisp
  (defun ms/cleanup-buffer-safe ()
    "Perform a bunch of safe operations on the whitespace content of a buffer.
  Does not indent buffer, because it is used for a before-save-hook, and that
  might be bad."
    (interactive)
    (untabify (point-min) (point-max))
    (delete-trailing-whitespace)
    (set-buffer-file-coding-system 'utf-8))

  ;; Various superfluous white-space. Just say no.
  ;; 2019-06-07: comment out the hook for now.
  ;; (add-hook 'before-save-hook 'cleanup-buffer-safe)

  (defun ms/cleanup-buffer ()
    "Perform a bunch of operations on the whitespace content of a buffer.
  Including indent-buffer, which should not be called automatically on save."
    (interactive)
    (ms/cleanup-buffer-safe)
    (indent-region (point-min) (point-max)))

  ;; (global-set-key (kbd "C-c n") 'ms/cleanup-buffer)
#+end_src

**** Previous Buffer
This is a rather well-known trick to switch to the previous buffer, well-suited to keep switching back and forth between two buffers.
#+BEGIN_SRC emacs-lisp
  (defun aeh/switch-to-previous-buffer ()
    "Switch to previously open buffer.
  Repeated invocations toggle between the two most recently open buffers."
    (interactive)
    (switch-to-buffer (other-buffer (current-buffer) 1)))
#+END_SRC
**** Delete current buffer file
This is one of Bailey Ling's functions from "config-util.el".
#+BEGIN_SRC emacs-lisp
(defun aeh/delete-current-buffer-file ()
  "Kill the current buffer and deletes the file it is visiting."
  (interactive)
  (let ((filename (buffer-file-name)))
    (when filename
      (if (vc-backend filename)
          (vc-delete-file filename)
        (when (y-or-n-p (format "Are you sure you want to delete %s? " filename))
          (delete-file filename)
          (message "Deleted file %s" filename)
          (kill-buffer))))))
#+END_SRC
**** Rename current buffer file
This is one of Bailey Ling's functions from "config-util.el".
#+BEGIN_SRC emacs-lisp
(defun aeh/rename-current-buffer-file ()
  "Renames current buffer and file it is visiting."
  (interactive)
  (let ((filename (buffer-file-name)))
    (if (not (and filename (file-exists-p filename)))
        (message "Buffer is not visiting a file!")
      (let ((new-name (read-file-name "New name: " filename)))
        (cond
         ((vc-backend filename) (vc-rename-file filename new-name))
         (t
          (rename-file filename new-name t)
          (set-visited-file-name new-name t t)))))))
#+END_SRC
**** Insert buffer/file directory at point
This inserts the directory (full path) of the current file at point.
#+BEGIN_SRC emacs-lisp
  (defun aeh/insert-default-directory ()
    "Insert the value of default-directory at point"
    (interactive)
    (insert default-directory))
#+END_SRC

Also, we can insert the file name (full path) of the current file at point.
#+BEGIN_SRC emacs-lisp
  (defun aeh/insert-current-file-name ()
    "Insert the value of current file name at point"
    (interactive)
    (insert buffer-file-name))
#+END_SRC

**** Copy file name to clipboard
This is one of Bailey Ling's functions from "config-util.el".
#+BEGIN_SRC emacs-lisp
(defun aeh/copy-file-name-to-clipboard ()
  "Copy the current buffer file name to the clipboard."
  (interactive)
  (let ((filename (if (equal major-mode 'dired-mode)
                      default-directory
                    (buffer-file-name))))
    (when filename
      (kill-new filename)
      (message "Copied buffer file name '%s' to the clipboard." filename))))
#+END_SRC
**** Edit file as root
This is one of Bailey Ling's functions from "config-util.el".
#+BEGIN_SRC emacs-lisp
(defun aeh/edit-file-as-root (file)
  "Edits a file as root."
  (interactive "f")
  (find-file-other-window (concat "/sudo:root@localhost:" file)))
#+END_SRC
**** Convert buffer to DOS format
This is one of Bailey Ling's functions from "config-util.el".
#+BEGIN_SRC emacs-lisp
(defun aeh/set-buffer-to-dos-format ()
  "Converts the current buffer to DOS file format."
  (interactive)
  (set-buffer-file-coding-system 'undecided-dos nil))
#+END_SRC
**** Convert buffer to UNIX format
This is one of Bailey Ling's functions from "config-util.el".
#+BEGIN_SRC emacs-lisp
(defun aeh/set-buffer-to-unix-format ()
  "Converts the current buffer to UNIX file format."
  (interactive)
  (set-buffer-file-coding-system 'undecided-unix nil))
#+END_SRC

**** Window splitting/following
After you split a window, the focus remains in the original window. Uncle Dave disliked this so much he wrote two functions to fix the problem.
#+BEGIN_SRC emacs-lisp
(defun split-and-follow-horizontally ()
  (interactive)
  (split-window-below)
  (balance-windows)
  (other-window 1))
(global-set-key (kbd "C-x 2") 'split-and-follow-horizontally)

(defun split-and-follow-vertically ()
  (interactive)
  (split-window-right)
  (balance-windows)
  (other-window 1))
(global-set-key (kbd "C-x 3") 'split-and-follow-vertically)
#+END_SRC

**** Killing buffers cleanly
By default =x k= is bound to =kill-buffer=; instead, we want to kill the current buffer.
#+BEGIN_SRC emacs-lisp
(defun kill-current-buffer ()
  "Kills the current buffer."
  (interactive)
  (kill-buffer (current-buffer)))
(global-set-key (kbd "C-x k") 'kill-current-buffer)
#+END_SRC

**** Upgrade Assistance
These functions are copied from here: 
#+begin_src emacs-lisp
  (defun package-menu-find-marks ()
    "Find packages marked for action in *Packages*."
    (interactive)
    (occur "^[A-Z]"))

  ;; Only in Emacs 25.1+
  (defun package-menu-filter-by-status (status)
    "Filter the *Packages* buffer by status."
    (interactive
     (list (completing-read
            "Status: " '("new" "installed" "dependency" "obsolete"))))
    (package-menu-filter (concat "status:" status)))

  (define-key package-menu-mode-map "s" #'package-menu-filter-by-status)
  (define-key package-menu-mode-map "a" #'package-menu-find-marks)
#+end_src

**** Set JSON indentation setup
#+begin_src emacs-lisp
  (defun aeh/json-mode-hook ()
     (setq-local js-indent-level 2))
  (add-hook 'json-mode-hook 'aeh/js2-mode-hook)
#+end_src

** Diminish
Diminish will remove or abbreviate minor mode names on the modeline. Although "use-package" does support the diminish function, the [[https://github.com/jwiegley/use-package][documentation]] states the package must be installed. (The same with "delight"; not sure what that does--yet.) Diminish wasn't diminishing at startup until after I moved it to the END of the packages listing--then it still wasn't diminishing Undo-tree (which seems to be a requirement of another package.) So, let's try it at the end of everything...yup, that did it!
#+BEGIN_SRC emacs-lisp
  (use-package diminish
    :ensure t
    :defer 1
    :config
    (diminish 'flymake-mode)
    (diminish 'highlight-indentation-mode)
    (diminish 'org-indent-mode)
    (diminish 'linum-relative-mode)
    (diminish 'page-break-lines-mode)
    (diminish 'evil-collection-unimpaired-mode)
    (diminish 'visual-line-mode)
    (diminish 'projectile-mode)
    ;; (diminish 'ivy-mode)
    (diminish 'company-mode)
    (diminish 'eldoc-mode)
    (diminish 'undo-tree-mode)
    (diminish 'subword-mode))
#+END_SRC
Diminish doesn't work for some minor modes as they are hard-coded into the minor mode. Instead, set custom variables to nil.
#+begin_src emacs-lisp
  (setq auto-revert-mode-text nil)
#+end_src
** Misc. Settings 
Readings on articles about "persistent undo" in Emacs, I see that variable "undo-tree-auto-save-history" should be True.
2020-01-28: Got rid of undo-tree--as much as possible. Evil requires it to be installed, but I can and will disable it with the loading of undo-fu-session. I will still need the "undo" directory, as undo-fu-session saves undo history, and all the config is done in the undo-fu/undo-fu-session package config.

*** Set work default directory
#+begin_src emacs-lisp
  ;; 2019-09-11: setting default directory for work/home
  (if (string-equal system-type "windows-nt")
      (setq default-directory "C:/_work/")
    (setq default-directory "~/"))
  (message "Default Dir: %S" default-directory)
#+end_src

*** Load abbreviations
#+begin_src emacs-lisp
(load "we-abbrevs")
#+end_src
** Finally
This is the place to put "final" steps, like visiting common files, etc.
#+begin_src emacs-lisp
  ;; 2019-10-21: setting default directory for work/home
  ;; 2020-02-28: modified work path to progn to add x12-mode.el
  (if (string-equal system-type "windows-nt")
      (progn
        (find-file "c:/_work/org/todo.org")
        ;; 2020-04-27: Created acts.org, load with todo.org
        (find-file "c:/_work/org/acts.org")
        ;; 2020-09-09: Add back in jira.org file.
        (find-file "c:/_work/org/jira.org")
        ;; 2020-02-28: add x12-mode autoload plus file extensions
        (progn
          (autoload 'x12-mode "x12-mode" "" t)
          ;; Add more file extensions as required
          (add-to-list 'auto-mode-alist '("\\.x12\\'" . x12-mode)))))
  ;; 2019-12-10: Created ~/.emacs.d/private/local/aeh-useful.el, so load it
  (load "aeh-useful")
  ;; 2023-05-28: Add auto-loading of zoom file.
  ;; 2023-06-04: cannot get timing right with loading of origami, so stopping this for now.
  ;; 07/02/2023: Trying with-eval-after-load. Great! That worked.
  (with-eval-after-load 'origami
    (find-file "/home/arnold/Documents/AA/zoom-meetings-info.txt")
    (find-file "~/Documents/Health/BP-tracking.txt")
  )
#+end_src

This last piece sets local variables for this file,
Ref: https://www.reddit.com/r/orgmode/comments/jy8fuc/orgbabeltangle_on_save/
Ref: https://github.com/joseph8th/literatemacs

Local Variables: 
eval: (add-hook 'after-save-hook (lambda ()(if (y-or-n-p "Reload?")(load-file user-init-file))) nil t) 
eval: (add-hook 'after-save-hook (lambda ()(if (y-or-n-p "Tangle?")(org-babel-tangle))) nil t) 
End:
